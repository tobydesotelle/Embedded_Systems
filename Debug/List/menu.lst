###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          20/Nov/2022  19:04:50
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\menu.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EWAE07.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\menu.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\menu.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\menu.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\menu.c
      1          #include "macros.h"

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      2          int prev_thumb;
   \                     prev_thumb:
   \   000000                DS8 2
      3          extern volatile unsigned short display_bits;
      4          extern unsigned int V_Thumb;
      5          extern volatile unsigned char switch_control;
      6          //This is will manage the menu state machine.

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          unsigned char menu_state;
   \                     menu_state:
   \   000000                DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
      8          void menu_state_machine(){
   \                     menu_state_machine:
      9            switch(menu_state){
   \   000000   5E42....     MOV.B   &menu_state, R14
   \   000004   4E83         SUB.B   #0x0, R14
   \   000006   0B24         JEQ     ??menu_state_machine_1
   \   000008   5E83         SUB.B   #0x1, R14
   \   00000A   0C24         JEQ     ??menu_state_machine_2
   \   00000C   5E83         SUB.B   #0x1, R14
   \   00000E   0C24         JEQ     ??menu_state_machine_3
   \   000010   5E83         SUB.B   #0x1, R14
   \   000012   0C24         JEQ     ??menu_state_machine_4
   \   000014   5E83         SUB.B   #0x1, R14
   \   000016   0C24         JEQ     ??menu_state_machine_5
   \   000018   5E83         SUB.B   #0x1, R14
   \   00001A   0224         JEQ     ??menu_state_machine_6
   \   00001C   0B3C         JMP     ??menu_state_machine_0
     10            case Start_menu://start menu will have bat voltage and othe general info
     11              start_menu();
   \                     ??menu_state_machine_1:
   \   00001E   ....         JMP     ?Subroutine1
     12              break;
     13          //  case Connneting_menu:
     14          //    connecting_screen();
     15          //    break;
     16            case IP_Display:
     17              display_IP();
   \                     ??menu_state_machine_6:
   \   000020   ........     BRA     #display_IP
     18              break;
     19            case Main_menu:
     20              main_menu();
   \                     ??menu_state_machine_2:
   \   000024   ........     BRA     #main_menu
     21              break;
     22            case Settings:
     23              settings_menu();
   \                     ??menu_state_machine_3:
   \   000028   ........     BRA     #settings_menu
     24              break;
     25            case ADC_menu:
     26              adc_menu();
   \                     ??menu_state_machine_4:
   \   00002C   ........     BRA     #adc_menu
     27              break;
     28            case PID_menu:
     29              pid_menu();
   \                     ??menu_state_machine_5:
   \   000030   ........     BRA     #pid_menu
     30              break;
     31              
     32            default:
     33              menu_state = Main_menu;
   \                     ??menu_state_machine_0:
   \   000034   D243....     MOV.B   #0x1, &menu_state
     34              break;
     35            }
     36            
     37          }
   \   000038   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
     38          void start_menu(){
   \                     start_menu:
     39            Init_Display_1();
   \   000000                REQUIRE ?Subroutine1
   \   000000                // Fall through to label ?Subroutine1

   \                                 In  segment CODE, align 2
   \                     ?Subroutine1:
   \   000000   ........     CALLA   #Init_Display_1
     40            clear_display();
   \   000004   ........     BRA     #clear_display
     41          }

   \                                 In  segment CODE, align 2
     42          void main_menu(){
   \                     main_menu:
     43            main_menu_display(menu_options_3);
   \   000000   1C42....     MOV.W   &V_Thumb, R12
   \   000004                RPT     #0xa
   \   000004   49190C10     RRUX.W  R12
   \   000008   ........     CALLA   #main_menu_display
     44            //add change state logic
     45            if(SW1_AND_TOGGLED){
   \   00000C   F2B01000.... BIT.B   #0x10, &switch_control
   \   000012   1924         JEQ     ??main_menu_0
     46              SW1_CLEAR;
   \   000014   F2C01000.... BIC.B   #0x10, &switch_control
     47              switch(menu_options_3){
   \   00001A   1E42....     MOV.W   &V_Thumb, R14
   \   00001E                RPT     #0xa
   \   00001E   49190E10     RRUX.W  R14
   \   000022   4E83         SUB.B   #0x0, R14
   \   000024   0724         JEQ     ??main_menu_1
   \   000026   5E83         SUB.B   #0x1, R14
   \   000028   0824         JEQ     ??main_menu_2
   \   00002A   5E83         SUB.B   #0x1, R14
   \   00002C   0A24         JEQ     ??main_menu_3
   \   00002E   5E83         SUB.B   #0x1, R14
   \   000030   0824         JEQ     ??main_menu_3
   \   000032   1001         RETA
     48              case CASE_0:
     49                menu_state = Settings;
   \                     ??main_menu_1:
   \   000034   E243....     MOV.B   #0x2, &menu_state
     50                break;
   \   000038   1001         RETA
     51              case CASE_1:
     52                menu_state = ADC_menu;
   \                     ??main_menu_2:
   \   00003A   F2400300.... MOV.B   #0x3, &menu_state
     53                break;
   \   000040   1001         RETA
     54              case CASE_3:
     55              case CASE_2:
     56                menu_state = PID_menu;
   \                     ??main_menu_3:
   \   000042   E242....     MOV.B   #0x4, &menu_state
     57                break;
     58              }
     59            }
     60          }
   \                     ??main_menu_0:
   \   000046   1001         RETA

   \                                 In  segment CODE, align 2
     61          void settings_menu(){
   \                     settings_menu:
     62            if(SW2_AND_TOGGLED){
   \   000000   F2B02000.... BIT.B   #0x20, &switch_control
   \   000006   0524         JEQ     ??settings_menu_0
     63              SW2_CLEAR;
   \   000008   F2C02000.... BIC.B   #0x20, &switch_control
     64              menu_state = Main_menu;
   \   00000E   D243....     MOV.B   #0x1, &menu_state
     65            }
     66          }
   \                     ??settings_menu_0:
   \   000012   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   F2B02000.... BIT.B   #0x20, &switch_control
   \   000006   0724         JEQ     ??pid_menu_0
   \   000008   F2C02000.... BIC.B   #0x20, &switch_control
   \   00000E   D243....     MOV.B   #0x1, &menu_state
   \   000012   ........     CALLA   #lcd_4line
   \                     ??pid_menu_0:
   \   000016   1001         RETA

   \                                 In  segment CODE, align 2
     67          void adc_menu(){
   \                     adc_menu:
     68            if(SW2_AND_TOGGLED){
   \   000000   ....         JMP     ?Subroutine0
   \   000002   0343         NOP
     69              SW2_CLEAR;
     70              menu_state = Main_menu;
     71              lcd_4line();
     72            }
     73            
     74          }

   \                                 In  segment CODE, align 2, keep-with-next
     75          void pid_menu(){
   \                     pid_menu:
     76            if(SW2_AND_TOGGLED){
   \   000000                REQUIRE ?Subroutine0
   \   000000                // Fall through to label ?Subroutine0
     77              SW2_CLEAR;
     78              menu_state = Main_menu;
     79              lcd_4line();
     80            }
     81            
     82          }

   \                                 In  segment CODE, align 2
     83          void v_thumb_process(){
   \                     v_thumb_process:
     84            if(prev_thumb<(V_Thumb>>4)){
   \   000000   1F42....     MOV.W   &V_Thumb, R15
   \   000004   5F0F         RRUM.W  #0x4, R15
   \   000006   829F....     CMP.W   R15, &prev_thumb
   \   00000A   052C         JC      ??v_thumb_process_0
     85              prev_thumb=V_Thumb>>4;
   \   00000C   824F....     MOV.W   R15, &prev_thumb
     86              display_bits |= Song_char_changed; 
   \   000010   A2D3....     BIS.W   #0x2, &display_bits
   \   000014   1001         RETA
     87            }
     88            else if(prev_thumb>V_Thumb>>4){
   \                     ??v_thumb_process_0:
   \   000016   1F92....     CMP.W   &prev_thumb, R15
   \   00001A   022C         JC      ??v_thumb_process_1
     89              prev_thumb=V_Thumb>>4;
   \   00001C   824F....     MOV.W   R15, &prev_thumb
     90            }
     91          }
   \                     ??v_thumb_process_1:
   \   000020   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   adc_menu
        4   -> lcd_4line
      4   main_menu
        4   -> main_menu_display
      4   menu_state_machine
        4   -> Init_Display_1
        0   -> adc_menu
        0   -> clear_display
        0   -> display_IP
        0   -> main_menu
        0   -> pid_menu
        0   -> settings_menu
      0   pid_menu
        4   -> lcd_4line
      4   settings_menu
      0   start_menu
        4   -> Init_Display_1
        0   -> clear_display
      4   v_thumb_process


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?Subroutine0
       8  ?Subroutine1
       4  adc_menu
      72  main_menu
       1  menu_state
      58  menu_state_machine
       0  pid_menu
       2  prev_thumb
      20  settings_menu
       0  start_menu
      34  v_thumb_process

 
 220 bytes in segment CODE
   3 bytes in segment DATA16_Z
 
 220 bytes of CODE memory
   3 bytes of DATA memory

Errors: none
Warnings: none
