###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          04/Dec/2022  14:29:42
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\iot.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EWDA45.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\iot.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --no_unroll
#        --no_inline --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.5\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X --data_model=small
#        -Om --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\iot.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\iot.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\iot.c
      1          #include "macros.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2
      2          extern volatile unsigned short serial_bits;
      3          extern volatile unsigned short display_bits;
      4          extern volatile unsigned char switch_control;
      5          extern volatile unsigned short timer_bits;
      6          
      7          extern unsigned char menu_state;
      8          extern char IP_Addy[21];
      9          extern char SSID[64];
     10          extern char Commands[NUM_Commands][NUM_Command_chars];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          unsigned int cur_command;
   \                     cur_command:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          unsigned int commmand_time; 
   \                     commmand_time:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          unsigned short IOT_bits;
   \                     IOT_bits:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          unsigned char command_state;
   \                     command_state:
   \   000000                DS8 1
     15          extern unsigned int write_command_line;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int trim;
   \                     trim:
   \   000000                DS8 2
     17          extern short timing;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          char last_command[6];
   \                     last_command:
   \   000000                DS8 6
     19          #define System_Store0	 ("AT+SYSSTORE=0\r\n")
     20          #define CIPMUX1		 ("AT+CIPMUX=1\r\n")
     21          #define SSID_Find	 ("AT+CWJAP?\r\n")
     22          #define CIPSERVER1	 ("AT+CIPSERVER=1,4200\r\n")
     23          #define Find_IP		 ("AT+CIFSR\r\n")
     24          
     25          #define OK		("OK\r\n")
     26          #define IP_found	("WIFI GOT IP\r\n")
     27          #define Start_timmer	(0x54)
     28          #define Trim		(0x59)
     29          #define Display_pad	(0xA4)
     30          #define IOT_Process_next (0x01)
     31          #define Change_Speed	(0xA5)
     32          #define NUM_queues	(50)
     33          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned char command_queue[NUM_queues];
   \                     command_queue:
   \   000000                DS8 50

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned int time_queue[NUM_queues];
   \                     time_queue:
   \   000000                DS8 100
     36          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     37          unsigned char *add_to_queue=command_queue;
   \                     add_to_queue:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for add_to_queue>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     38          unsigned char *read_command_queue=command_queue;
   \                     read_command_queue:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for read_command_queue>`
     39          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     40          unsigned int *add_to_time=time_queue;
   \                     add_to_time:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for add_to_time>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     41          unsigned int *read_time=time_queue;
   \                     read_time:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for read_time>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          unsigned int timerb1_2_cnt;
   \                     timerb1_2_cnt:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          char IOT_state=0;
   \                     IOT_state:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          char IOT_state_mem;
   \                     IOT_state_mem:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char Exit;
   \                     Exit:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          char char_num[5];
   \                     char_num:
   \   000000                DS8 5
     47          extern char display_pad_case;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     48          unsigned int foward_speed = 8000;
   \                     foward_speed:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for foward_speed>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     49          unsigned int right_trim = 500;
   \                     right_trim:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for right_trim>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          unsigned int left_trim = 0;
   \                     left_trim:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          char Speed_state;
   \                     Speed_state:
   \   000000                DS8 1

   \                                 In  segment CODE, align 2
     52          void IOT_main(){
   \                     IOT_main:
     53              P3OUT |= IOT_EN_CPU;
   \   000000   F2D080002202 BIS.B   #0x80, &0x222
   \   000006   063C         JMP     ??IOT_main_1
     54            while(!(serial_bits & Wifi_connected) ){
     55              Connecting_machine();
   \                     ??IOT_main_0:
   \   000008   ........     CALLA   #Connecting_machine
     56              iot_wifi_connect();
   \   00000C   ........     CALLA   #iot_wifi_connect
     57              Display_Process();
   \   000010   ........     CALLA   #Display_Process
     58            }
   \                     ??IOT_main_1:
   \   000014   B2B00010.... BIT.W   #0x1000, &serial_bits
   \   00001A   F627         JEQ     ??IOT_main_0
     59            SW1_CLEAR;
   \   00001C   F2C01000.... BIC.B   #0x10, &switch_control
     60            SW2_CLEAR;
   \   000022   F2C02000.... BIC.B   #0x20, &switch_control
     61            menu_state = Main_menu;
   \   000028   D243....     MOV.B   #0x1, &menu_state
     62            IOT_bits |= IOT_Process_next;
   \   00002C   92D3....     BIS.W   #0x1, &IOT_bits
     63          }
   \   000030   1001         RETA
   \   000032                REQUIRE _A_PBOUT_L

   \                                 In  segment CODE, align 2
     64          void Command_state(){//handle movements and times 
   \                     Command_state:
   \   000000   0A12         PUSH.W  R10
     65            get_command();
   \   000002   ........     CALLA   #get_command
     66            process_command();
   \   000006   ........     CALLA   #process_command
     67            
     68            //if(Command_state == 0){//flag new command  and stop command
     69              switch(*read_command_queue){// Add display 
   \   00000A   3A40....     MOV.W   #read_command_queue, R10
   \   00000E   2F4A         MOV.W   @R10, R15
   \   000010   6E4F         MOV.B   @R15, R14
   \   000012   4E83         SUB.B   #0x0, R14
   \   000014   1D24         JEQ     ??Command_state_2
   \   000016   7E800300     SUB.B   #0x3, R14
   \   00001A   4124         JEQ     ??Command_state_3
   \   00001C   6E83         SUB.B   #0x2, R14
   \   00001E   8E24         JEQ     ??Command_state_4
   \   000020   6E83         SUB.B   #0x2, R14
   \   000022   7B24         JEQ     ??Command_state_5
   \   000024   6E82         SUB.B   #0x4, R14
   \   000026   6824         JEQ     ??Command_state_6
   \   000028   6E82         SUB.B   #0x4, R14
   \   00002A   5524         JEQ     ??Command_state_7
   \   00002C   7E804500     SUB.B   #0x45, R14
   \   000030   C624         JEQ     ??Command_state_1
   \   000032   5E83         SUB.B   #0x1, R14
   \   000034   CD24         JEQ     ??Command_state_8
   \   000036   6E82         SUB.B   #0x4, R14
   \   000038   8424         JEQ     ??Command_state_9
   \   00003A   7E804B00     SUB.B   #0x4b, R14
   \   00003E   8D24         JEQ     ??Command_state_10
   \   000040   5E83         SUB.B   #0x1, R14
   \   000042   9624         JEQ     ??Command_state_11
   \   000044   7E804C00     SUB.B   #0x4c, R14
   \   000048   1124         JEQ     ??Command_state_12
   \   00004A   6E82         SUB.B   #0x4, R14
   \   00004C   1D24         JEQ     ??Command_state_13
   \   00004E   E43C         JMP     ??Command_state_0
     70              case IDLE:
     71                move(0X00);
   \                     ??Command_state_2:
   \   000050   0C43         MOV.W   #0x0, R12
   \   000052   ........     CALLA   #move
     72                if(display_pad_case == 0){
   \   000056   C293....     CMP.B   #0x0, &display_pad_case
   \   00005A   0520         JNE     ??Command_state_14
     73          	change_display_line(" Waiting  ",DISPLAY0);
   \   00005C   0D43         MOV.W   #0x0, R13
   \   00005E   3C40....     MOV.W   #`?<Constant " Waiting  ">`, R12
   \   000062   ........     CALLA   #change_display_line
     74          	//last_command = "     ";
     75                }
     76                stop();
   \                     ??Command_state_14:
   \   000066   ........     CALLA   #stop
     77                break;
   \   00006A   D63C         JMP     ??Command_state_0
     78              case ESTOP:
     79                stop();
   \                     ??Command_state_12:
   \   00006C   ........     CALLA   #stop
     80                move(0X00);
   \   000070   0C43         MOV.W   #0x0, R12
   \   000072   ........     CALLA   #move
     81                do_for(read_command_queue,Process_next,*read_time);
   \   000076   1F42....     MOV.W   &read_time, R15
   \   00007A   2E4F         MOV.W   @R15, R14
   \   00007C   7D405500     MOV.B   #0x55, R13
   \   000080   2C4A         MOV.W   @R10, R12
   \   000082   ........     CALLA   #do_for
     82                break;
   \   000086   C83C         JMP     ??Command_state_0
     83              case STOP:
     84                stop();
   \                     ??Command_state_13:
   \   000088   ........     CALLA   #stop
     85                //wifi_move_diplay(Stop_display);
     86                do_for(read_command_queue,Process_next,*read_time);
   \   00008C   1F42....     MOV.W   &read_time, R15
   \   000090   2E4F         MOV.W   @R15, R14
   \   000092   7D405500     MOV.B   #0x55, R13
   \   000096   2C4A         MOV.W   @R10, R12
   \   000098   ........     CALLA   #do_for
     87                break;
   \   00009C   BD3C         JMP     ??Command_state_0
     88              case FORWARD:
     89          //      set_speed(8000);
     90                set_right_speed(foward_speed+right_trim);//8000
   \                     ??Command_state_3:
   \   00009E   1C42....     MOV.W   &foward_speed, R12
   \   0000A2   1C52....     ADD.W   &right_trim, R12
   \   0000A6   ........     CALLA   #set_right_speed
     91                set_left_speed(foward_speed+left_trim);
   \   0000AA   1C42....     MOV.W   &foward_speed, R12
   \   0000AE   1C52....     ADD.W   &left_trim, R12
   \   0000B2   ........     CALLA   #set_left_speed
     92                move(FORWARD);
   \   0000B6   3C400300     MOV.W   #0x3, R12
   \   0000BA   ........     CALLA   #move
     93                clear_line(0);
   \   0000BE   0C43         MOV.W   #0x0, R12
   \   0000C0   ........     CALLA   #clear_line
     94                //change_display_line("f0080",DISPLAY3);
     95                do_for(read_command_queue,Process_next,*read_time);
   \   0000C4   1F42....     MOV.W   &read_time, R15
   \   0000C8   2E4F         MOV.W   @R15, R14
   \   0000CA   7D405500     MOV.B   #0x55, R13
   \   0000CE   2C4A         MOV.W   @R10, R12
   \   0000D0   ........     CALLA   #do_for
     96                //command_state = Start_timmer;
     97                break;
   \   0000D4   A13C         JMP     ??Command_state_0
     98              case REVERSE:
     99                set_speed(8000);
   \                     ??Command_state_7:
   \   0000D6   3C40401F     MOV.W   #0x1f40, R12
   \   0000DA   ........     CALLA   #set_speed
    100                move(REVERSE);
   \   0000DE   3C400F00     MOV.W   #0xf, R12
   \   0000E2   ........     CALLA   #move
    101                //change_display_line("b0080",DISPLAY3);
    102                //wifi_move_diplay(REVERSE_display);
    103                do_for(read_command_queue,Process_next,*read_time);
   \   0000E6   1F42....     MOV.W   &read_time, R15
   \   0000EA   2E4F         MOV.W   @R15, R14
   \   0000EC   7D405500     MOV.B   #0x55, R13
   \   0000F0   2C4A         MOV.W   @R10, R12
   \   0000F2   ........     CALLA   #do_for
    104                //command_state = Start_timmer;
    105                break;
   \   0000F6   903C         JMP     ??Command_state_0
    106              case CCW:
    107                set_speed(7000);
   \                     ??Command_state_6:
   \   0000F8   3C40581B     MOV.W   #0x1b58, R12
   \   0000FC   ........     CALLA   #set_speed
    108                move(CW);
   \   000100   3C400700     MOV.W   #0x7, R12
   \   000104   ........     CALLA   #move
    109                //change_display_line("r0001",DISPLAY3);
    110                //wifi_move_diplay(CCW_display);
    111                do_for(read_command_queue,Process_next,*read_time);
   \   000108   1F42....     MOV.W   &read_time, R15
   \   00010C   2E4F         MOV.W   @R15, R14
   \   00010E   7D405500     MOV.B   #0x55, R13
   \   000112   2C4A         MOV.W   @R10, R12
   \   000114   ........     CALLA   #do_for
    112                //command_state = Start_timmer;
    113                break;
   \   000118   7F3C         JMP     ??Command_state_0
    114              case CW:
    115                set_speed(7000);
   \                     ??Command_state_5:
   \   00011A   3C40581B     MOV.W   #0x1b58, R12
   \   00011E   ........     CALLA   #set_speed
    116                move(CCW);
   \   000122   3C400B00     MOV.W   #0xb, R12
   \   000126   ........     CALLA   #move
    117                //change_display_line("l0001",DISPLAY3);
    118                //wifi_move_diplay(CW_display);
    119                do_for(read_command_queue,Process_next,*read_time);
   \   00012A   1F42....     MOV.W   &read_time, R15
   \   00012E   2E4F         MOV.W   @R15, R14
   \   000130   7D405500     MOV.B   #0x55, R13
   \   000134   2C4A         MOV.W   @R10, R12
   \   000136   ........     CALLA   #do_for
    120                //command_state = Start_timmer;
    121                break;
   \   00013A   6E3C         JMP     ??Command_state_0
    122              case PID:
    123                //change_display_line("p9000",DISPLAY3);
    124                Line_Machine();
   \                     ??Command_state_4:
   \   00013C   ........     CALLA   #Line_Machine
    125                //timing = 1; ------------------------------ timing start
    126                //do_for(read_command_queue,Process_next,*read_time);
    127                break;
   \   000140   6B3C         JMP     ??Command_state_0
    128              case Trim:
    129                trim+=100;
   \                     ??Command_state_9:
   \   000142   B2506400.... ADD.W   #0x64, &trim
    130                do_for(read_command_queue,Process_next,*read_time);
   \   000148   1F42....     MOV.W   &read_time, R15
   \   00014C   2E4F         MOV.W   @R15, R14
   \   00014E   7D405500     MOV.B   #0x55, R13
   \   000152   2C4A         MOV.W   @R10, R12
   \   000154   ........     CALLA   #do_for
    131                break;
   \   000158   5F3C         JMP     ??Command_state_0
    132              case Display_pad:
    133                //change_display_line("u0000",DISPLAY3);
    134                diplay_pad_increment();
   \                     ??Command_state_10:
   \   00015A   ........     CALLA   #diplay_pad_increment
    135                do_for(read_command_queue,Process_next,*read_time);
   \   00015E   1F42....     MOV.W   &read_time, R15
   \   000162   2E4F         MOV.W   @R15, R14
   \   000164   7D405500     MOV.B   #0x55, R13
   \   000168   2C4A         MOV.W   @R10, R12
   \   00016A   ........     CALLA   #do_for
    136                break;
   \   00016E   543C         JMP     ??Command_state_0
    137              case Change_Speed:
    138                switch(Speed_state){
   \                     ??Command_state_11:
   \   000170   5E42....     MOV.B   &Speed_state, R14
   \   000174   4E83         SUB.B   #0x0, R14
   \   000176   0524         JEQ     ??Command_state_15
   \   000178   5E83         SUB.B   #0x1, R14
   \   00017A   0C24         JEQ     ??Command_state_16
   \   00017C   5E83         SUB.B   #0x1, R14
   \   00017E   1524         JEQ     ??Command_state_17
   \   000180   1E3C         JMP     ??Command_state_1
    139                case 0:
    140          	foward_speed = 8000;
   \                     ??Command_state_15:
   \   000182   B240401F.... MOV.W   #0x1f40, &foward_speed
    141          	right_trim = 500;
   \   000188   B240F401.... MOV.W   #0x1f4, &right_trim
    142          	Speed_state++;
   \   00018E   D243....     MOV.B   #0x1, &Speed_state
    143          	break;
   \   000192   153C         JMP     ??Command_state_1
    144                case 1:
    145          	foward_speed = 30000;
   \                     ??Command_state_16:
   \   000194   B2403075.... MOV.W   #0x7530, &foward_speed
    146          	left_trim = 1000;
   \   00019A   B240E803.... MOV.W   #0x3e8, &left_trim
    147          	right_trim = 0;
   \   0001A0   8243....     MOV.W   #0x0, &right_trim
    148          	Speed_state++;
   \   0001A4   E243....     MOV.B   #0x2, &Speed_state
    149          	break;
   \   0001A8   0A3C         JMP     ??Command_state_1
    150                case 2:
    151          	foward_speed = 58000;
   \                     ??Command_state_17:
   \   0001AA   B24090E2.... MOV.W   #0xe290, &foward_speed
    152          	left_trim = 3000;
   \   0001B0   B240B80B.... MOV.W   #0xbb8, &left_trim
    153          	right_trim = 0;
   \   0001B6   8243....     MOV.W   #0x0, &right_trim
    154          	Speed_state = 0;
   \   0001BA   C243....     MOV.B   #0x0, &Speed_state
    155          	break;
    156                }
    157                do_for(read_command_queue,Process_next,*read_time);
    158                break;
    159              case Start_timmer:
    160                do_for(read_command_queue,Process_next,*read_time);
   \                     ??Command_state_1:
   \   0001BE   1F42....     MOV.W   &read_time, R15
   \   0001C2   2E4F         MOV.W   @R15, R14
   \   0001C4   7D405500     MOV.B   #0x55, R13
   \   0001C8   2C4A         MOV.W   @R10, R12
   \   0001CA   ........     CALLA   #do_for
    161                break;
   \   0001CE   243C         JMP     ??Command_state_0
    162              case Process_next:
    163                stop();
   \                     ??Command_state_8:
   \   0001D0   ........     CALLA   #stop
    164                move(0X00);
   \   0001D4   0C43         MOV.W   #0x0, R12
   \   0001D6   ........     CALLA   #move
    165                *read_command_queue = RESET;
   \   0001DA   2F4A         MOV.W   @R10, R15
   \   0001DC   CF430000     MOV.B   #0x0, 0(R15)
    166                *read_time = RESET;
   \   0001E0   1F42....     MOV.W   &read_time, R15
   \   0001E4   8F430000     MOV.W   #0x0, 0(R15)
    167          	read_command_queue++;
   \   0001E8   9253....     ADD.W   #0x1, &read_command_queue
    168          	read_time++;
   \   0001EC   A253....     ADD.W   #0x2, &read_time
    169          	if(read_command_queue - command_queue >= NUM_queues)read_command_queue = command_queue;
   \   0001F0   2F4A         MOV.W   @R10, R15
   \   0001F2   3F80....     SUB.W   #command_queue, R15
   \   0001F6   3F903200     CMP.W   #0x32, R15
   \   0001FA   0338         JL      ??Command_state_18
   \   0001FC   B240........ MOV.W   #command_queue, &read_command_queue
    170          	if(read_time- time_queue >= NUM_queues)read_time= time_queue;
   \                     ??Command_state_18:
   \   000202   1F42....     MOV.W   &read_time, R15
   \   000206   5F03         RRUM.W  #0x1, R15
   \   000208   3F80....     SUB.W   #LWRD(time_queue >> 1 & 0x7fff), R15
   \   00020C   3F903200     CMP.W   #0x32, R15
   \   000210   0338         JL      ??Command_state_0
   \   000212   B240........ MOV.W   #time_queue, &read_time
    171                break;
    172              //}
    173            }
    174          }
   \                     ??Command_state_0:
   \   000218   3A41         POP.W   R10
   \   00021A   1001         RETA
    175          

   \                                 In  segment CODE, align 2
    176          void iot_wifi_connect(){
   \                     iot_wifi_connect:
    177            if(serial_bits & Send_next_command){
   \   000000   B2B00008.... BIT.W   #0x800, &serial_bits
   \   000006   0524         JEQ     ??iot_wifi_connect_0
    178              IOT_state++;
   \   000008   D253....     ADD.B   #0x1, &IOT_state
    179              serial_bits &= ~Send_next_command;
   \   00000C   B2C00008.... BIC.W   #0x800, &serial_bits
    180            }
    181            switch(IOT_state){
   \                     ??iot_wifi_connect_0:
   \   000012   5E42....     MOV.B   &IOT_state, R14
   \   000016   4E83         SUB.B   #0x0, R14
   \   000018   1D24         JEQ     ??iot_wifi_connect_1
   \   00001A   5E83         SUB.B   #0x1, R14
   \   00001C   1F24         JEQ     ??iot_wifi_connect_2
   \   00001E   5E83         SUB.B   #0x1, R14
   \   000020   4D24         JEQ     ??iot_wifi_connect_3
   \   000022   5E83         SUB.B   #0x1, R14
   \   000024   2324         JEQ     ??iot_wifi_connect_4
   \   000026   5E83         SUB.B   #0x1, R14
   \   000028   4924         JEQ     ??iot_wifi_connect_3
   \   00002A   5E83         SUB.B   #0x1, R14
   \   00002C   2724         JEQ     ??iot_wifi_connect_5
   \   00002E   5E83         SUB.B   #0x1, R14
   \   000030   4524         JEQ     ??iot_wifi_connect_3
   \   000032   5E83         SUB.B   #0x1, R14
   \   000034   2B24         JEQ     ??iot_wifi_connect_6
   \   000036   5E83         SUB.B   #0x1, R14
   \   000038   3124         JEQ     ??iot_wifi_connect_7
   \   00003A   5E83         SUB.B   #0x1, R14
   \   00003C   3324         JEQ     ??iot_wifi_connect_8
   \   00003E   5E83         SUB.B   #0x1, R14
   \   000040   3924         JEQ     ??iot_wifi_connect_9
   \   000042   5E83         SUB.B   #0x1, R14
   \   000044   3B24         JEQ     ??iot_wifi_connect_3
   \   000046   5E83         SUB.B   #0x1, R14
   \   000048   3D24         JEQ     ??iot_wifi_connect_10
   \   00004A   5E83         SUB.B   #0x1, R14
   \   00004C   4424         JEQ     ??iot_wifi_connect_11
   \   00004E   5E83         SUB.B   #0x1, R14
   \   000050   4424         JEQ     ??iot_wifi_connect_12
   \   000052   1001         RETA
    182            case 0://add timerfor timing out finding
    183              process_buffer_0(IP_found);
   \                     ??iot_wifi_connect_1:
   \   000054   3C40....     MOV.W   #`?<Constant "WIFI GOT IP\\r\\n">`, R12
   \   000058   ........     BRA     #process_buffer_0
    184              break;
    185            case 1:
    186              send(System_Store0,Send_UCA0);
   \                     ??iot_wifi_connect_2:
   \   00005C   4D43         MOV.B   #0x0, R13
   \   00005E   3C40....     MOV.W   #`?<Constant "AT+SYSSTORE=0\\r\\n">`, R12
   \   000062   ........     CALLA   #send
    187              IOT_state++;
   \   000066   D253....     ADD.B   #0x1, &IOT_state
    188              break;
   \   00006A   1001         RETA
    189            case 2://check for okay process
    190              process_buffer_0(OK);
    191              break;
    192            case 3:
    193              send(CIPMUX1,Send_UCA0);
   \                     ??iot_wifi_connect_4:
   \   00006C   4D43         MOV.B   #0x0, R13
   \   00006E   3C40....     MOV.W   #`?<Constant "AT+CIPMUX=1\\r\\n">`, R12
   \   000072   ........     CALLA   #send
    194              IOT_state++;
   \   000076   D253....     ADD.B   #0x1, &IOT_state
    195              break;
   \   00007A   1001         RETA
    196            case 4:
    197              process_buffer_0(OK);
    198              break;
    199            case 5:
    200              send(CIPSERVER1,Send_UCA0);
   \                     ??iot_wifi_connect_5:
   \   00007C   4D43         MOV.B   #0x0, R13
   \   00007E   3C40....     MOV.W   #`?<Constant "AT+CIPSERVER=1,4200\\r\\n">`, R12
   \   000082   ........     CALLA   #send
    201              IOT_state++;
   \   000086   D253....     ADD.B   #0x1, &IOT_state
    202              break;
   \   00008A   1001         RETA
    203            case 6:
    204              process_buffer_0(OK);
    205              break;
    206            case 7:
    207              send(SSID_Find,Send_UCA0);
   \                     ??iot_wifi_connect_6:
   \   00008C   4D43         MOV.B   #0x0, R13
   \   00008E   3C40....     MOV.W   #`?<Constant "AT+CWJAP?\\r\\n">`, R12
   \   000092   ........     CALLA   #send
    208              IOT_state++;
   \   000096   D253....     ADD.B   #0x1, &IOT_state
    209              break;
   \   00009A   1001         RETA
    210            case 8:
    211              //get_SSID();
    212              get_from_serial(SSID);
   \                     ??iot_wifi_connect_7:
   \   00009C   3C40....     MOV.W   #SSID, R12
   \   0000A0   ........     BRA     #get_from_serial
    213              break;
    214            case 9:
    215              send(Find_IP,Send_UCA0);
   \                     ??iot_wifi_connect_8:
   \   0000A4   4D43         MOV.B   #0x0, R13
   \   0000A6   3C40....     MOV.W   #`?<Constant "AT+CIFSR\\r\\n">`, R12
   \   0000AA   ........     CALLA   #send
    216              IOT_state++;
   \   0000AE   D253....     ADD.B   #0x1, &IOT_state
    217              break;
   \   0000B2   1001         RETA
    218            case 10:
    219              //get_IP();
    220              get_from_serial(IP_Addy);
   \                     ??iot_wifi_connect_9:
   \   0000B4   3C40....     MOV.W   #IP_Addy, R12
   \   0000B8   ........     BRA     #get_from_serial
    221              break;
    222            case 11:
    223              process_buffer_0(OK);
   \                     ??iot_wifi_connect_3:
   \   0000BC   3C40....     MOV.W   #`?<Constant "OK\\r\\n">`, R12
   \   0000C0   ........     BRA     #process_buffer_0
    224              break;
    225            case 12:
    226              P3OUT |= IOT_LINK_CPU;
   \                     ??iot_wifi_connect_10:
   \   0000C4   F2D040002202 BIS.B   #0x40, &0x222
    227              display_bits |= Display_IP;
   \   0000CA   A2D2....     BIS.W   #0x4, &display_bits
    228              //menu_state = IP_Display;
    229              IOT_state++;
   \   0000CE   F2400D00.... MOV.B   #0xd, &IOT_state
    230              break;
   \   0000D4   1001         RETA
    231            case 13:
    232              get_connected();
   \                     ??iot_wifi_connect_11:
   \   0000D6   ........     BRA     #get_connected
    233                break;
    234            case 14:
    235              serial_bits |= Wifi_connected;
   \                     ??iot_wifi_connect_12:
   \   0000DA   B2D00010.... BIS.W   #0x1000, &serial_bits
    236              clear_display();
   \   0000E0   ........     BRA     #clear_display
   \   0000E4                REQUIRE _A_PBOUT_L
    237            }
    238            
    239          }

   \                                 In  segment CODE, align 2
    240          void process_command(){ // reads command then adds to the queue
   \                     process_command:
   \   000000   0A12         PUSH.W  R10
   \   000002   1F42....     MOV.W   &cur_command, R15
   \   000006   5F0E         RLAM.W  #0x4, R15
   \   000008   FF907800.... CMP.B   #0x78, Commands + 4(R15)
   \   00000E   0720         JNE     ??process_command_2
    241            if(Commands[cur_command][PASSWORD_LENGTH]=='x'){//If currently written is the estop command
    242              *read_command_queue = ESTOP;
   \   000010   1F42....     MOV.W   &read_command_queue, R15
   \   000014   FF40F1000000 MOV.B   #0xf1, 0(R15)
    243              cur_command++;
   \   00001A   9253....     ADD.W   #0x1, &cur_command
   \                     ??process_command_2:
   \   00001E   1C42....     MOV.W   &cur_command, R12
   \   000022   5C0E         RLAM.W  #0x4, R12
   \   000024   5A4C....     MOV.B   Commands + 4(R12), R10
   \   000028   7A907700     CMP.B   #0x77, R10
   \   00002C   0520         JNE     ??process_command_3
    244            }
    245            if(Commands[cur_command][PASSWORD_LENGTH]=='w'){//If currently written is the estop command
    246              Exit=1;
   \   00002E   D243....     MOV.B   #0x1, &Exit
    247              cur_command++;
   \   000032   9253....     ADD.W   #0x1, &cur_command
   \   000036   9C3C         JMP     ??process_command_0
    248            }
    249            else if(strncmp(Commands[cur_command],PASSWORD,PASSWORD_LENGTH) == 0){
   \                     ??process_command_3:
   \   000038   2E42         MOV.W   #0x4, R14
   \   00003A   3D40....     MOV.W   #`?<Constant "1234">`, R13
   \   00003E   3C50....     ADD.W   #Commands, R12
   \   000042   ........     CALLA   #strncmp
   \   000046   0C93         CMP.W   #0x0, R12
   \   000048   9320         JNE     ??process_command_0
    250              switch(Commands[cur_command][PASSWORD_LENGTH]){
   \   00004A   7A806200     SUB.B   #0x62, R10
   \   00004E   1C24         JEQ     ??process_command_4
   \   000050   5A83         SUB.B   #0x1, R10
   \   000052   5224         JEQ     ??process_command_5
   \   000054   7A800300     SUB.B   #0x3, R10
   \   000058   0F24         JEQ     ??process_command_6
   \   00005A   7A800600     SUB.B   #0x6, R10
   \   00005E   2424         JEQ     ??process_command_7
   \   000060   6A82         SUB.B   #0x4, R10
   \   000062   3224         JEQ     ??process_command_8
   \   000064   6A83         SUB.B   #0x2, R10
   \   000066   1824         JEQ     ??process_command_9
   \   000068   5A83         SUB.B   #0x1, R10
   \   00006A   2624         JEQ     ??process_command_10
   \   00006C   6A83         SUB.B   #0x2, R10
   \   00006E   3C24         JEQ     ??process_command_11
   \   000070   7A800300     SUB.B   #0x3, R10
   \   000074   3124         JEQ     ??process_command_12
   \   000076   473C         JMP     ??process_command_1
    251              case 'f':
    252                *add_to_queue++ = FORWARD;
   \                     ??process_command_6:
   \   000078   1F42....     MOV.W   &add_to_queue, R15
   \   00007C   FF4003000000 MOV.B   #0x3, 0(R15)
   \   000082   9253....     ADD.W   #0x1, &add_to_queue
    253                break;
   \   000086   3F3C         JMP     ??process_command_1
    254              case 'b':
    255                *add_to_queue++ = REVERSE;
   \                     ??process_command_4:
   \   000088   1F42....     MOV.W   &add_to_queue, R15
   \   00008C   FF400F000000 MOV.B   #0xf, 0(R15)
   \   000092   9253....     ADD.W   #0x1, &add_to_queue
    256                break;
   \   000096   373C         JMP     ??process_command_1
    257              case 'r':
    258                *add_to_queue++ = CW;
   \                     ??process_command_9:
   \   000098   1F42....     MOV.W   &add_to_queue, R15
   \   00009C   FF4007000000 MOV.B   #0x7, 0(R15)
   \   0000A2   9253....     ADD.W   #0x1, &add_to_queue
    259                break;
   \   0000A6   2F3C         JMP     ??process_command_1
    260              case 'l':
    261                *add_to_queue++ = CCW;
   \                     ??process_command_7:
   \   0000A8   1F42....     MOV.W   &add_to_queue, R15
   \   0000AC   FF400B000000 MOV.B   #0xb, 0(R15)
   \   0000B2   9253....     ADD.W   #0x1, &add_to_queue
    262                break;
   \   0000B6   273C         JMP     ??process_command_1
    263              case 's':
    264                *add_to_queue++ = STOP;
   \                     ??process_command_10:
   \   0000B8   1F42....     MOV.W   &add_to_queue, R15
   \   0000BC   FF40F5000000 MOV.B   #0xf5, 0(R15)
   \   0000C2   9253....     ADD.W   #0x1, &add_to_queue
    265                break;
   \   0000C6   1F3C         JMP     ??process_command_1
    266              case 'p':
    267                *add_to_queue++ = PID;
   \                     ??process_command_8:
   \   0000C8   1F42....     MOV.W   &add_to_queue, R15
   \   0000CC   FF4005000000 MOV.B   #0x5, 0(R15)
   \   0000D2   9253....     ADD.W   #0x1, &add_to_queue
    268                break;
   \   0000D6   173C         JMP     ??process_command_1
    269              case 'x':
    270                *add_to_queue++ = Trim;
   \                     ??process_command_12:
   \   0000D8   1F42....     MOV.W   &add_to_queue, R15
   \   0000DC   FF4059000000 MOV.B   #0x59, 0(R15)
   \   0000E2   9253....     ADD.W   #0x1, &add_to_queue
    271                break;
   \   0000E6   0F3C         JMP     ??process_command_1
    272              case 'u':
    273                *add_to_queue++ = Display_pad;
   \                     ??process_command_11:
   \   0000E8   1F42....     MOV.W   &add_to_queue, R15
   \   0000EC   FF40A4000000 MOV.B   #0xa4, 0(R15)
   \   0000F2   9253....     ADD.W   #0x1, &add_to_queue
    274                break;
   \   0000F6   073C         JMP     ??process_command_1
    275              case 'c':
    276                *add_to_queue++ = Change_Speed;
   \                     ??process_command_5:
   \   0000F8   1F42....     MOV.W   &add_to_queue, R15
   \   0000FC   FF40A5000000 MOV.B   #0xa5, 0(R15)
   \   000102   9253....     ADD.W   #0x1, &add_to_queue
    277                break;
    278              }
    279              
    280              
    281              strncpy(char_num,&Commands[cur_command][PASSWORD_LENGTH+1],4);
   \                     ??process_command_1:
   \   000106   2E42         MOV.W   #0x4, R14
   \   000108   1D42....     MOV.W   &cur_command, R13
   \   00010C   5D0E         RLAM.W  #0x4, R13
   \   00010E   3D50....     ADD.W   #Commands + 5, R13
   \   000112   3C40....     MOV.W   #char_num, R12
   \   000116   ........     CALLA   #strncpy
    282              
    283              clear_command();
   \   00011A   ........     CALLA   #clear_command
    284              
    285              *add_to_time++ = str_to_int(char_num);  
   \   00011E   1A42....     MOV.W   &add_to_time, R10
   \   000122   0F4A         MOV.W   R10, R15
   \   000124   2F53         ADD.W   #0x2, R15
   \   000126   824F....     MOV.W   R15, &add_to_time
   \   00012A   3C40....     MOV.W   #char_num, R12
   \   00012E   ........     CALLA   #str_to_int
   \   000132   8A4C0000     MOV.W   R12, 0(R10)
    286              cur_command++;
   \   000136   9253....     ADD.W   #0x1, &cur_command
    287              
    288              if(cur_command>=NUM_Commands)cur_command = RESET;
   \   00013A   B2900A00.... CMP.W   #0xa, &cur_command
   \   000140   0228         JNC     ??process_command_13
   \   000142   8243....     MOV.W   #0x0, &cur_command
    289              if(add_to_time - time_queue >= NUM_queues)add_to_time = time_queue;
   \                     ??process_command_13:
   \   000146   1F42....     MOV.W   &add_to_time, R15
   \   00014A   5F03         RRUM.W  #0x1, R15
   \   00014C   3F80....     SUB.W   #LWRD(time_queue >> 1 & 0x7fff), R15
   \   000150   3F903200     CMP.W   #0x32, R15
   \   000154   0338         JL      ??process_command_14
   \   000156   B240........ MOV.W   #time_queue, &add_to_time
    290              if(add_to_queue - command_queue >= NUM_queues)add_to_queue = command_queue;
   \                     ??process_command_14:
   \   00015C   1F42....     MOV.W   &add_to_queue, R15
   \   000160   3F80....     SUB.W   #command_queue, R15
   \   000164   3F903200     CMP.W   #0x32, R15
   \   000168   0338         JL      ??process_command_0
   \   00016A   B240........ MOV.W   #command_queue, &add_to_queue
    291          
    292              
    293              
    294            }
    295          }
   \                     ??process_command_0:
   \   000170   3A41         POP.W   R10
   \   000172   1001         RETA

   \                                 In  segment CODE, align 2
    296          unsigned int str_to_int(char *num_string){
   \                     str_to_int:
   \   000000   0A12         PUSH.W  R10
    297            int sum=0;
    298            sum+=1000*((unsigned int)(num_string[0]-'0'));
    299            sum+=100*((unsigned int)(num_string[1]-'0'));
    300            sum+=10*((unsigned int)(num_string[2]-'0'));
    301            sum+=1*((unsigned int)(num_string[3]-'0'));
    302            return sum;
   \   000002   3D40D0FF     MOV.W   #0xffd0, R13
   \   000006   7E4C         MOV.B   @R12+, R14
   \   000008   0E5D         ADD.W   R13, R14
   \   00000A   5E0A         RLAM.W  #0x3, R14
   \   00000C   0F4E         MOV.W   R14, R15
   \   00000E   5E06         RLAM.W  #0x2, R14
   \   000010   0F5E         ADD.W   R14, R15
   \   000012   0E5E         RLA.W   R14
   \   000014   0F5E         ADD.W   R14, R15
   \   000016   0E5E         RLA.W   R14
   \   000018   0F5E         ADD.W   R14, R15
   \   00001A   0E5E         RLA.W   R14
   \   00001C   0F5E         ADD.W   R14, R15
   \   00001E   0E5E         RLA.W   R14
   \   000020   0E5F         ADD.W   R15, R14
   \   000022   7F4C         MOV.B   @R12+, R15
   \   000024   0F5D         ADD.W   R13, R15
   \   000026   5F06         RLAM.W  #0x2, R15
   \   000028   0A4F         MOV.W   R15, R10
   \   00002A   5F0A         RLAM.W  #0x3, R15
   \   00002C   0A5F         ADD.W   R15, R10
   \   00002E   0F5F         RLA.W   R15
   \   000030   0F5A         ADD.W   R10, R15
   \   000032   0E5F         ADD.W   R15, R14
   \   000034   7F4C         MOV.B   @R12+, R15
   \   000036   0F5D         ADD.W   R13, R15
   \   000038                RPT     #0xa
   \   000038   49180E5F     ADDX.W  R15, R14
   \   00003C   7F4C         MOV.B   @R12+, R15
   \   00003E   0F5D         ADD.W   R13, R15
   \   000040   0E5F         ADD.W   R15, R14
   \   000042   0C4E         MOV.W   R14, R12
   \   000044   3A41         POP.W   R10
   \   000046   1001         RETA
    303          }

   \                                 In  segment CODE, align 2
    304          void clear_command(){
   \                     clear_command:
    305            for(int j = 0;j<NUM_Command_chars;j++){
   \   000000   0F43         MOV.W   #0x0, R15
   \   000002   073C         JMP     ??clear_command_1
    306              Commands[cur_command][j]=RESET;
   \                     ??clear_command_0:
   \   000004   1E42....     MOV.W   &cur_command, R14
   \   000008   5E0E         RLAM.W  #0x4, R14
   \   00000A   0E5F         ADD.W   R15, R14
   \   00000C   CE43....     MOV.B   #0x0, Commands(R14)
    307            }
   \   000010   1F53         ADD.W   #0x1, R15
   \                     ??clear_command_1:
   \   000012   3F901000     CMP.W   #0x10, R15
   \   000016   F63B         JL      ??clear_command_0
    308          }
   \   000018   1001         RETA

   \                                 In  segment CODE, align 2
    309          void movement_time(unsigned int time){
   \                     movement_time:
    310            TB1CCTL2 &= ~CCIFG;
   \   000000   92C3C603     BIC.W   #0x1, &0x3c6
    311            TB1CCTL2 |= CCIE;
   \   000004   B2D01000C603 BIS.W   #0x10, &0x3c6
    312            if(timer_bits & Movemet_timer){
   \   00000A   B2B01000.... BIT.W   #0x10, &timer_bits
   \   000010   1024         JEQ     ??movement_time_0
    313              timerb1_2_cnt++;
   \   000012   9253....     ADD.W   #0x1, &timerb1_2_cnt
    314               timer_bits &= ~Movemet_timer;
   \   000016   B2C01000.... BIC.W   #0x10, &timer_bits
    315              if(timerb1_2_cnt >= time){
   \   00001C   829C....     CMP.W   R12, &timerb1_2_cnt
   \   000020   0828         JNC     ??movement_time_0
    316               TB1CCTL2 &= ~CCIE;
   \   000022   B2C01000C603 BIC.W   #0x10, &0x3c6
    317                timerb1_2_cnt = 0;
   \   000028   8243....     MOV.W   #0x0, &timerb1_2_cnt
    318                
    319                command_state = STOP;
   \   00002C   F240F500.... MOV.B   #0xf5, &command_state
    320              }
    321            }
    322          }
   \                     ??movement_time_0:
   \   000032   1001         RETA
   \   000034                REQUIRE _A_TB1CCTL2_L

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for add_to_queue>`:
   \   000000   ....         DC16 command_queue

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for read_command_queue>`:
   \   000000   ....         DC16 command_queue

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for add_to_time>`:
   \   000000   ....         DC16 time_queue

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for read_time>`:
   \   000000   ....         DC16 time_queue

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for foward_speed>`:
   \   000000   401F         DC16 8000

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for right_trim>`:
   \   000000   F401         DC16 500

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Waiting  ">`:
   \   000000   205761697469 DC8 " Waiting  "
   \            6E67202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WIFI GOT IP\\r\\n">`:
   \   000000   574946492047 DC8 "WIFI GOT IP\015\012"
   \            4F542049500D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+SYSSTORE=0\\r\\n">`:
   \   000000   41542B535953 DC8 "AT+SYSSTORE=0\015\012"
   \            53544F52453D
   \            300D0A00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A00   DC8 "OK\015\012"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPMUX=1\015\012"
   \            4D55583D310D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPSERVER=1,4200\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPSERVER=1,4200\015\012"
   \            534552564552
   \            3D312C343230
   \            300D0A00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CWJAP?\\r\\n">`:
   \   000000   41542B43574A DC8 "AT+CWJAP?\015\012"
   \            41503F0D0A00

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIFSR\\r\\n">`:
   \   000000   41542B434946 DC8 "AT+CIFSR\015\012"
   \            53520D0A00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "1234">`:
   \   000000   3132333400   DC8 "1234"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Command_state
        6   -> Line_Machine
        6   -> change_display_line
        6   -> clear_line
        6   -> diplay_pad_increment
        6   -> do_for
        6   -> get_command
        6   -> move
        6   -> process_command
        6   -> set_left_speed
        6   -> set_right_speed
        6   -> set_speed
        6   -> stop
      4   IOT_main
        4   -> Connecting_machine
        4   -> Display_Process
        4   -> iot_wifi_connect
      4   clear_command
      4   iot_wifi_connect
        0   -> clear_display
        0   -> get_connected
        0   -> get_from_serial
        0   -> process_buffer_0
        4   -> send
      4   movement_time
      6   process_command
        6   -> clear_command
        6   -> str_to_int
        6   -> strncmp
        6   -> strncpy
      6   str_to_int


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant " Waiting  ">
       5  ?<Constant "1234">
      11  ?<Constant "AT+CIFSR\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      22  ?<Constant "AT+CIPSERVER=1,4200\r\n">
      12  ?<Constant "AT+CWJAP?\r\n">
      16  ?<Constant "AT+SYSSTORE=0\r\n">
       5  ?<Constant "OK\r\n">
      14  ?<Constant "WIFI GOT IP\r\n">
       2  ?<Initializer for add_to_queue>
       2  ?<Initializer for add_to_time>
       2  ?<Initializer for foward_speed>
       2  ?<Initializer for read_command_queue>
       2  ?<Initializer for read_time>
       2  ?<Initializer for right_trim>
     540  Command_state
       1  Exit
       2  IOT_bits
      50  IOT_main
       1  IOT_state
       1  IOT_state_mem
       1  Speed_state
       2  _A_PBOUT_L
       2  _A_TB1CCTL2_L
       2  add_to_queue
       2  add_to_time
       5  char_num
      26  clear_command
      50  command_queue
       1  command_state
       2  commmand_time
       2  cur_command
       2  foward_speed
     228  iot_wifi_connect
       6  last_command
       2  left_trim
      52  movement_time
     372  process_command
       2  read_command_queue
       2  read_time
       2  right_trim
      72  str_to_int
     100  time_queue
       2  timerb1_2_cnt
       2  trim

 
 1 340 bytes in segment CODE
     4 bytes in segment DATA16_AN
   110 bytes in segment DATA16_C
    12 bytes in segment DATA16_I
    12 bytes in segment DATA16_ID
   178 bytes in segment DATA16_Z
 
 1 340 bytes of CODE  memory
   122 bytes of CONST memory
   190 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
