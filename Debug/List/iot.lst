###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          28/Nov/2022  20:12:32
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\iot.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EW9241.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\iot.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ol --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\iot.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\iot.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\iot.c
      1          #include "macros.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2
      2          extern volatile unsigned short serial_bits;
      3          extern volatile unsigned short display_bits;
      4          extern volatile unsigned char switch_control;
      5          extern volatile unsigned short timer_bits;
      6          
      7          extern unsigned char menu_state;
      8          extern char IP_Addy[21];
      9          extern char SSID[64];
     10          extern char Commands[NUM_Commands][NUM_Command_chars];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          unsigned int cur_command;
   \                     cur_command:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          unsigned int commmand_time; 
   \                     commmand_time:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          unsigned short IOT_bits;
   \                     IOT_bits:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          unsigned char command_state;
   \                     command_state:
   \   000000                DS8 1
     15          extern unsigned int write_command_line;
     16          
     17          
     18          #define System_Store0	 ("AT+SYSSTORE=0\r\n")
     19          #define CIPMUX1		 ("AT+CIPMUX=1\r\n")
     20          #define SSID_Find	 ("AT+CWJAP?\r\n")
     21          #define CIPSERVER1	 ("AT+CIPSERVER=1,4200\r\n")
     22          #define Find_IP		 ("AT+CIFSR\r\n")
     23          
     24          #define OK		("OK\r\n")
     25          #define IP_found	("WIFI GOT IP\r\n")
     26          #define Start_timmer	(0x54)
     27          #define Process_next	(0x55)
     28          #define IOT_Process_next (0x01)
     29          #define NUM_queues	(50)
     30          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned char command_queue[NUM_queues];
   \                     command_queue:
   \   000000                DS8 50

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int time_queue[NUM_queues];
   \                     time_queue:
   \   000000                DS8 100
     33          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     34          unsigned char *add_to_queue=command_queue;
   \                     add_to_queue:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for add_to_queue>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     35          unsigned char *read_command_queue=command_queue;
   \                     read_command_queue:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for read_command_queue>`
     36          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     37          unsigned int *add_to_time=time_queue;
   \                     add_to_time:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for add_to_time>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     38          unsigned int *read_time=time_queue;
   \                     read_time:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for read_time>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          unsigned int timerb1_2_cnt;
   \                     timerb1_2_cnt:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          char IOT_state=0;
   \                     IOT_state:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          char IOT_state_mem;
   \                     IOT_state_mem:
   \   000000                DS8 1

   \                                 In  segment CODE, align 2
     42          void IOT_main(){
   \                     IOT_main:
     43              P3OUT |= IOT_EN_CPU;
   \   000000   F2D080002202 BIS.B   #0x80, &0x222
   \   000006   063C         JMP     ??IOT_main_1
     44            while(!(serial_bits & Wifi_connected) ){
     45              Connecting_machine();
   \                     ??IOT_main_0:
   \   000008   ........     CALLA   #Connecting_machine
     46              iot_wifi_connect();
   \   00000C   ........     CALLA   #iot_wifi_connect
     47              Display_Process();
   \   000010   ........     CALLA   #Display_Process
     48            }
   \                     ??IOT_main_1:
   \   000014   B2B00010.... BIT.W   #0x1000, &serial_bits
   \   00001A   F62B         JNC     ??IOT_main_0
     49            SW1_CLEAR;
   \   00001C   F2C01000.... BIC.B   #0x10, &switch_control
     50            SW2_CLEAR;
   \   000022   F2C02000.... BIC.B   #0x20, &switch_control
     51            menu_state = Main_menu;
   \   000028   D243....     MOV.B   #0x1, &menu_state
     52            IOT_bits |= IOT_Process_next;
   \   00002C   92D3....     BIS.W   #0x1, &IOT_bits
     53          }
   \   000030   1001         RETA
   \   000032                REQUIRE _A_PBOUT_L

   \                                 In  segment CODE, align 2
     54          void Command_state(){//handle movements and times 
   \                     Command_state:
     55            get_command();
   \   000000   ........     CALLA   #get_command
     56            process_command();
   \   000004   ........     CALLA   #process_command
     57            //if(Command_state == 0){//flag new command  and stop command
     58              switch(*read_command_queue){// Add display 
   \   000008   1F42....     MOV.W   &read_command_queue, R15
   \   00000C   6E4F         MOV.B   @R15, R14
   \   00000E   4E83         SUB.B   #0x0, R14
   \   000010   1424         JEQ     ??Command_state_1
   \   000012   7E800300     SUB.B   #0x3, R14
   \   000016   2324         JEQ     ??Command_state_2
   \   000018   6E82         SUB.B   #0x4, R14
   \   00001A   4B24         JEQ     ??Command_state_3
   \   00001C   6E82         SUB.B   #0x4, R14
   \   00001E   3B24         JEQ     ??Command_state_4
   \   000020   6E82         SUB.B   #0x4, R14
   \   000022   2B24         JEQ     ??Command_state_5
   \   000024   7E804500     SUB.B   #0x45, R14
   \   000028   5224         JEQ     ??Command_state_6
   \   00002A   5E83         SUB.B   #0x1, R14
   \   00002C   5A24         JEQ     ??Command_state_7
   \   00002E   7E809C00     SUB.B   #0x9c, R14
   \   000032   0624         JEQ     ??Command_state_8
   \   000034   6E82         SUB.B   #0x4, R14
   \   000036   0724         JEQ     ??Command_state_9
   \   000038   1001         RETA
     59              case IDLE:
     60                stop();
   \                     ??Command_state_1:
   \   00003A   ........     CALLA   #stop
     61                break;
   \   00003E   1001         RETA
     62              case ESTOP:
     63                stop();
   \                     ??Command_state_8:
   \   000040   ........     CALLA   #stop
     64                break;
   \   000044   1001         RETA
     65              case STOP:
     66                stop();
   \                     ??Command_state_9:
   \   000046   ........     CALLA   #stop
     67                //wifi_move_diplay(Stop_display);
     68                do_for(read_command_queue,Process_next,*read_time);
   \   00004A   1F42....     MOV.W   &read_time, R15
   \   00004E   2E4F         MOV.W   @R15, R14
   \   000050   7D405500     MOV.B   #0x55, R13
   \   000054   1C42....     MOV.W   &read_command_queue, R12
   \   000058   ........     CALLA   #do_for
     69                break;
   \   00005C   1001         RETA
     70              case FORWARD:
     71                move(FORWARD);
   \                     ??Command_state_2:
   \   00005E   3C400300     MOV.W   #0x3, R12
   \   000062   ........     CALLA   #move
     72                //wifi_move_diplay(FORWARD_display);
     73                do_for(read_command_queue,Process_next,*read_time);
   \   000066   1F42....     MOV.W   &read_time, R15
   \   00006A   2E4F         MOV.W   @R15, R14
   \   00006C   7D405500     MOV.B   #0x55, R13
   \   000070   1C42....     MOV.W   &read_command_queue, R12
   \   000074   ........     CALLA   #do_for
     74                //command_state = Start_timmer;
     75                break;
   \   000078   1001         RETA
     76              case REVERSE:
     77                move(REVERSE);
   \                     ??Command_state_5:
   \   00007A   3C400F00     MOV.W   #0xf, R12
   \   00007E   ........     CALLA   #move
     78                //wifi_move_diplay(REVERSE_display);
     79                do_for(read_command_queue,Process_next,*read_time);
   \   000082   1F42....     MOV.W   &read_time, R15
   \   000086   2E4F         MOV.W   @R15, R14
   \   000088   7D405500     MOV.B   #0x55, R13
   \   00008C   1C42....     MOV.W   &read_command_queue, R12
   \   000090   ........     CALLA   #do_for
     80                //command_state = Start_timmer;
     81                break;
   \   000094   1001         RETA
     82              case CCW:
     83                move(CW);
   \                     ??Command_state_4:
   \   000096   3C400700     MOV.W   #0x7, R12
   \   00009A   ........     CALLA   #move
     84                //wifi_move_diplay(CCW_display);
     85                do_for(read_command_queue,Process_next,*read_time);
   \   00009E   1F42....     MOV.W   &read_time, R15
   \   0000A2   2E4F         MOV.W   @R15, R14
   \   0000A4   7D405500     MOV.B   #0x55, R13
   \   0000A8   1C42....     MOV.W   &read_command_queue, R12
   \   0000AC   ........     CALLA   #do_for
     86                //command_state = Start_timmer;
     87                break;
   \   0000B0   1001         RETA
     88              case CW:
     89                move(CCW);
   \                     ??Command_state_3:
   \   0000B2   3C400B00     MOV.W   #0xb, R12
   \   0000B6   ........     CALLA   #move
     90                //wifi_move_diplay(CW_display);
     91                do_for(read_command_queue,Process_next,*read_time);
   \   0000BA   1F42....     MOV.W   &read_time, R15
   \   0000BE   2E4F         MOV.W   @R15, R14
   \   0000C0   7D405500     MOV.B   #0x55, R13
   \   0000C4   1C42....     MOV.W   &read_command_queue, R12
   \   0000C8   ........     CALLA   #do_for
     92                //command_state = Start_timmer;
     93                break;
   \   0000CC   1001         RETA
     94              case Start_timmer:
     95                do_for(read_command_queue,Process_next,*read_time);
   \                     ??Command_state_6:
   \   0000CE   1F42....     MOV.W   &read_time, R15
   \   0000D2   2E4F         MOV.W   @R15, R14
   \   0000D4   7D405500     MOV.B   #0x55, R13
   \   0000D8   1C42....     MOV.W   &read_command_queue, R12
   \   0000DC   ........     CALLA   #do_for
     96                break;
   \   0000E0   1001         RETA
     97              case Process_next:
     98                stop();
   \                     ??Command_state_7:
   \   0000E2   ........     CALLA   #stop
     99                *read_command_queue = RESET;
   \   0000E6   1F42....     MOV.W   &read_command_queue, R15
   \   0000EA   CF430000     MOV.B   #0x0, 0(R15)
    100                *read_time = RESET;
   \   0000EE   1F42....     MOV.W   &read_time, R15
   \   0000F2   8F430000     MOV.W   #0x0, 0(R15)
    101          	read_command_queue++;
   \   0000F6   9253....     ADD.W   #0x1, &read_command_queue
    102          	read_time++;
   \   0000FA   A253....     ADD.W   #0x2, &read_time
    103          	if(read_command_queue - command_queue >= NUM_queues)read_command_queue = command_queue;
   \   0000FE   1F42....     MOV.W   &read_command_queue, R15
   \   000102   3F80....     SUB.W   #command_queue, R15
   \   000106   3F903200     CMP.W   #0x32, R15
   \   00010A   0338         JL      ??Command_state_10
   \   00010C   B240........ MOV.W   #command_queue, &read_command_queue
    104          	if(read_time- time_queue >= NUM_queues)read_time= time_queue;
   \                     ??Command_state_10:
   \   000112   1F42....     MOV.W   &read_time, R15
   \   000116   5F03         RRUM.W  #0x1, R15
   \   000118   3F80....     SUB.W   #LWRD(time_queue >> 1 & 0x7fff), R15
   \   00011C   3F903200     CMP.W   #0x32, R15
   \   000120   0338         JL      ??Command_state_0
   \   000122   B240........ MOV.W   #time_queue, &read_time
    105                break;
    106              //}
    107            }
    108          }
   \                     ??Command_state_0:
   \   000128   1001         RETA

   \                                 In  segment CODE, align 2
    109          void iot_wifi_connect(){
   \                     iot_wifi_connect:
    110            if(serial_bits & Send_next_command){
   \   000000   B2B00008.... BIT.W   #0x800, &serial_bits
   \   000006   0528         JNC     ??iot_wifi_connect_0
    111              IOT_state++;
   \   000008   D253....     ADD.B   #0x1, &IOT_state
    112              serial_bits &= ~Send_next_command;
   \   00000C   B2C00008.... BIC.W   #0x800, &serial_bits
    113            }
    114            switch(IOT_state){
   \                     ??iot_wifi_connect_0:
   \   000012   5E42....     MOV.B   &IOT_state, R14
   \   000016   4E83         SUB.B   #0x0, R14
   \   000018   1D24         JEQ     ??iot_wifi_connect_1
   \   00001A   5E83         SUB.B   #0x1, R14
   \   00001C   2024         JEQ     ??iot_wifi_connect_2
   \   00001E   5E83         SUB.B   #0x1, R14
   \   000020   2624         JEQ     ??iot_wifi_connect_3
   \   000022   5E83         SUB.B   #0x1, R14
   \   000024   2924         JEQ     ??iot_wifi_connect_4
   \   000026   5E83         SUB.B   #0x1, R14
   \   000028   2F24         JEQ     ??iot_wifi_connect_5
   \   00002A   5E83         SUB.B   #0x1, R14
   \   00002C   3224         JEQ     ??iot_wifi_connect_6
   \   00002E   5E83         SUB.B   #0x1, R14
   \   000030   3824         JEQ     ??iot_wifi_connect_7
   \   000032   5E83         SUB.B   #0x1, R14
   \   000034   3B24         JEQ     ??iot_wifi_connect_8
   \   000036   5E83         SUB.B   #0x1, R14
   \   000038   4124         JEQ     ??iot_wifi_connect_9
   \   00003A   5E83         SUB.B   #0x1, R14
   \   00003C   4424         JEQ     ??iot_wifi_connect_10
   \   00003E   5E83         SUB.B   #0x1, R14
   \   000040   4A24         JEQ     ??iot_wifi_connect_11
   \   000042   5E83         SUB.B   #0x1, R14
   \   000044   4D24         JEQ     ??iot_wifi_connect_12
   \   000046   5E83         SUB.B   #0x1, R14
   \   000048   5024         JEQ     ??iot_wifi_connect_13
   \   00004A   5E83         SUB.B   #0x1, R14
   \   00004C   5624         JEQ     ??iot_wifi_connect_14
   \   00004E   5E83         SUB.B   #0x1, R14
   \   000050   5724         JEQ     ??iot_wifi_connect_15
   \   000052   1001         RETA
    115            case 0://add timerfor timing out finding
    116              process_buffer_0(IP_found);
   \                     ??iot_wifi_connect_1:
   \   000054   3C40....     MOV.W   #`?<Constant "WIFI GOT IP\\r\\n">`, R12
   \   000058   ........     CALLA   #process_buffer_0
    117              break;
   \   00005C   1001         RETA
    118            case 1:
    119              send(System_Store0,Send_UCA0);
   \                     ??iot_wifi_connect_2:
   \   00005E   4D43         MOV.B   #0x0, R13
   \   000060   3C40....     MOV.W   #`?<Constant "AT+SYSSTORE=0\\r\\n">`, R12
   \   000064   ........     CALLA   #send
    120              IOT_state++;
   \   000068   D253....     ADD.B   #0x1, &IOT_state
    121              break;
   \   00006C   1001         RETA
    122            case 2://check for okay process
    123              process_buffer_0(OK);
   \                     ??iot_wifi_connect_3:
   \   00006E   3C40....     MOV.W   #`?<Constant "OK\\r\\n">`, R12
   \   000072   ........     CALLA   #process_buffer_0
    124              break;
   \   000076   1001         RETA
    125            case 3:
    126              send(CIPMUX1,Send_UCA0);
   \                     ??iot_wifi_connect_4:
   \   000078   4D43         MOV.B   #0x0, R13
   \   00007A   3C40....     MOV.W   #`?<Constant "AT+CIPMUX=1\\r\\n">`, R12
   \   00007E   ........     CALLA   #send
    127              IOT_state++;
   \   000082   D253....     ADD.B   #0x1, &IOT_state
    128              break;
   \   000086   1001         RETA
    129            case 4:
    130              process_buffer_0(OK);
   \                     ??iot_wifi_connect_5:
   \   000088   3C40....     MOV.W   #`?<Constant "OK\\r\\n">`, R12
   \   00008C   ........     CALLA   #process_buffer_0
    131              break;
   \   000090   1001         RETA
    132            case 5:
    133              send(CIPSERVER1,Send_UCA0);
   \                     ??iot_wifi_connect_6:
   \   000092   4D43         MOV.B   #0x0, R13
   \   000094   3C40....     MOV.W   #`?<Constant "AT+CIPSERVER=1,4200\\r\\n">`, R12
   \   000098   ........     CALLA   #send
    134              IOT_state++;
   \   00009C   D253....     ADD.B   #0x1, &IOT_state
    135              break;
   \   0000A0   1001         RETA
    136            case 6:
    137              process_buffer_0(OK);
   \                     ??iot_wifi_connect_7:
   \   0000A2   3C40....     MOV.W   #`?<Constant "OK\\r\\n">`, R12
   \   0000A6   ........     CALLA   #process_buffer_0
    138              break;
   \   0000AA   1001         RETA
    139            case 7:
    140              send(SSID_Find,Send_UCA0);
   \                     ??iot_wifi_connect_8:
   \   0000AC   4D43         MOV.B   #0x0, R13
   \   0000AE   3C40....     MOV.W   #`?<Constant "AT+CWJAP?\\r\\n">`, R12
   \   0000B2   ........     CALLA   #send
    141              IOT_state++;
   \   0000B6   D253....     ADD.B   #0x1, &IOT_state
    142              break;
   \   0000BA   1001         RETA
    143            case 8:
    144              //get_SSID();
    145              get_from_serial(SSID);
   \                     ??iot_wifi_connect_9:
   \   0000BC   3C40....     MOV.W   #SSID, R12
   \   0000C0   ........     CALLA   #get_from_serial
    146              break;
   \   0000C4   1001         RETA
    147            case 9:
    148              send(Find_IP,Send_UCA0);
   \                     ??iot_wifi_connect_10:
   \   0000C6   4D43         MOV.B   #0x0, R13
   \   0000C8   3C40....     MOV.W   #`?<Constant "AT+CIFSR\\r\\n">`, R12
   \   0000CC   ........     CALLA   #send
    149              IOT_state++;
   \   0000D0   D253....     ADD.B   #0x1, &IOT_state
    150              break;
   \   0000D4   1001         RETA
    151            case 10:
    152              //get_IP();
    153              get_from_serial(IP_Addy);
   \                     ??iot_wifi_connect_11:
   \   0000D6   3C40....     MOV.W   #IP_Addy, R12
   \   0000DA   ........     CALLA   #get_from_serial
    154              break;
   \   0000DE   1001         RETA
    155            case 11:
    156              process_buffer_0(OK);
   \                     ??iot_wifi_connect_12:
   \   0000E0   3C40....     MOV.W   #`?<Constant "OK\\r\\n">`, R12
   \   0000E4   ........     CALLA   #process_buffer_0
    157              break;
   \   0000E8   1001         RETA
    158            case 12:
    159              P3OUT |= IOT_LINK_CPU;
   \                     ??iot_wifi_connect_13:
   \   0000EA   F2D040002202 BIS.B   #0x40, &0x222
    160              display_bits |= Display_IP;
   \   0000F0   A2D2....     BIS.W   #0x4, &display_bits
    161              //menu_state = IP_Display;
    162              IOT_state++;
   \   0000F4   D253....     ADD.B   #0x1, &IOT_state
    163              break;
   \   0000F8   1001         RETA
    164            case 13:
    165              get_connected();
   \                     ??iot_wifi_connect_14:
   \   0000FA   ........     CALLA   #get_connected
    166                break;
   \   0000FE   1001         RETA
    167            case 14:
    168              serial_bits |= Wifi_connected;
   \                     ??iot_wifi_connect_15:
   \   000100   B2D00010.... BIS.W   #0x1000, &serial_bits
    169              clear_display();
   \   000106   ........     CALLA   #clear_display
    170            }
    171            
    172          }
   \   00010A   1001         RETA
   \   00010C                REQUIRE _A_PBOUT_L

   \                                 In  segment CODE, align 2
    173          void process_command(){ // reads command then adds to the queue
   \                     process_command:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1000600     SUBA    #0x6, SP
    174            if(Commands[cur_command][PASSWORD_LENGTH]=='x'){//If currently written is the estop command
   \   000006   1F42....     MOV.W   &cur_command, R15
   \   00000A   5F0E         RLAM.W  #0x4, R15
   \   00000C   FF907800.... CMP.B   #0x78, Commands + 4(R15)
   \   000012   0320         JNE     ??process_command_1
    175              command_state = ESTOP;
   \   000014   F240F100.... MOV.B   #0xf1, &command_state
    176            }
    177            if(strncmp(Commands[cur_command],PASSWORD,PASSWORD_LENGTH) == 0){
   \                     ??process_command_1:
   \   00001A   2E42         MOV.W   #0x4, R14
   \   00001C   3D40....     MOV.W   #`?<Constant "1234">`, R13
   \   000020   1C42....     MOV.W   &cur_command, R12
   \   000024   5C0E         RLAM.W  #0x4, R12
   \   000026   3C50....     ADD.W   #Commands, R12
   \   00002A   ........     CALLA   #strncmp
   \   00002E   0C93         CMP.W   #0x0, R12
   \   000030   6D20         JNE     ??process_command_2
    178              switch(Commands[cur_command][PASSWORD_LENGTH]){
   \   000032   1F42....     MOV.W   &cur_command, R15
   \   000036   5F0E         RLAM.W  #0x4, R15
   \   000038   5E4F....     MOV.B   Commands + 4(R15), R14
   \   00003C   7E806200     SUB.B   #0x62, R14
   \   000040   1324         JEQ     ??process_command_3
   \   000042   6E82         SUB.B   #0x4, R14
   \   000044   0924         JEQ     ??process_command_4
   \   000046   7E800600     SUB.B   #0x6, R14
   \   00004A   1E24         JEQ     ??process_command_5
   \   00004C   7E800600     SUB.B   #0x6, R14
   \   000050   1324         JEQ     ??process_command_6
   \   000052   5E83         SUB.B   #0x1, R14
   \   000054   2124         JEQ     ??process_command_7
   \   000056   273C         JMP     ??process_command_0
    179              case 'f':
    180                *add_to_queue++ = FORWARD;
   \                     ??process_command_4:
   \   000058   1F42....     MOV.W   &add_to_queue, R15
   \   00005C   FF4003000000 MOV.B   #0x3, 0(R15)
   \   000062   9253....     ADD.W   #0x1, &add_to_queue
    181                break;
   \   000066   1F3C         JMP     ??process_command_0
    182              case 'b':
    183                *add_to_queue++ = REVERSE;
   \                     ??process_command_3:
   \   000068   1F42....     MOV.W   &add_to_queue, R15
   \   00006C   FF400F000000 MOV.B   #0xf, 0(R15)
   \   000072   9253....     ADD.W   #0x1, &add_to_queue
    184                break;
   \   000076   173C         JMP     ??process_command_0
    185              case 'r':
    186                *add_to_queue++ = CW;
   \                     ??process_command_6:
   \   000078   1F42....     MOV.W   &add_to_queue, R15
   \   00007C   FF4007000000 MOV.B   #0x7, 0(R15)
   \   000082   9253....     ADD.W   #0x1, &add_to_queue
    187                break;
   \   000086   0F3C         JMP     ??process_command_0
    188              case 'l':
    189                *add_to_queue++ = CCW;
   \                     ??process_command_5:
   \   000088   1F42....     MOV.W   &add_to_queue, R15
   \   00008C   FF400B000000 MOV.B   #0xb, 0(R15)
   \   000092   9253....     ADD.W   #0x1, &add_to_queue
    190                break;
   \   000096   073C         JMP     ??process_command_0
    191              case 's':
    192                *add_to_queue++ = STOP;
   \                     ??process_command_7:
   \   000098   1F42....     MOV.W   &add_to_queue, R15
   \   00009C   FF40F5000000 MOV.B   #0xf5, 0(R15)
   \   0000A2   9253....     ADD.W   #0x1, &add_to_queue
    193                break;
    194              }
    195              
    196              char char_num[5];
    197              strncpy(char_num,&Commands[cur_command][PASSWORD_LENGTH+1],4);
   \                     ??process_command_0:
   \   0000A6   2E42         MOV.W   #0x4, R14
   \   0000A8   1D42....     MOV.W   &cur_command, R13
   \   0000AC   5D0E         RLAM.W  #0x4, R13
   \   0000AE   3D50....     ADD.W   #Commands + 5, R13
   \   0000B2   0C41         MOV.W   SP, R12
   \   0000B4   ........     CALLA   #strncpy
    198              
    199              clear_command();
   \   0000B8   ........     CALLA   #clear_command
    200              
    201              *add_to_time++ = str_to_int(char_num);  
   \   0000BC   1A42....     MOV.W   &add_to_time, R10
   \   0000C0   0F4A         MOV.W   R10, R15
   \   0000C2   2F53         ADD.W   #0x2, R15
   \   0000C4   824F....     MOV.W   R15, &add_to_time
   \   0000C8   0C41         MOV.W   SP, R12
   \   0000CA   ........     CALLA   #str_to_int
   \   0000CE   8A4C0000     MOV.W   R12, 0(R10)
    202              cur_command++;
   \   0000D2   9253....     ADD.W   #0x1, &cur_command
    203              
    204              if(cur_command>=NUM_Commands)cur_command = RESET;
   \   0000D6   B2900A00.... CMP.W   #0xa, &cur_command
   \   0000DC   0228         JNC     ??process_command_8
   \   0000DE   8243....     MOV.W   #0x0, &cur_command
    205              if(add_to_time - time_queue >= NUM_queues)add_to_time = time_queue;
   \                     ??process_command_8:
   \   0000E2   1F42....     MOV.W   &add_to_time, R15
   \   0000E6   5F03         RRUM.W  #0x1, R15
   \   0000E8   3F80....     SUB.W   #LWRD(time_queue >> 1 & 0x7fff), R15
   \   0000EC   3F903200     CMP.W   #0x32, R15
   \   0000F0   0338         JL      ??process_command_9
   \   0000F2   B240........ MOV.W   #time_queue, &add_to_time
    206              if(add_to_queue - command_queue >= NUM_queues)add_to_queue = command_queue;
   \                     ??process_command_9:
   \   0000F8   1F42....     MOV.W   &add_to_queue, R15
   \   0000FC   3F80....     SUB.W   #command_queue, R15
   \   000100   3F903200     CMP.W   #0x32, R15
   \   000104   0338         JL      ??process_command_2
   \   000106   B240........ MOV.W   #command_queue, &add_to_queue
    207          
    208              
    209              
    210            }
    211          }
   \                     ??process_command_2:
   \   00010C   A1000600     ADDA    #0x6, SP
   \   000110   3A41         POP.W   R10
   \   000112   1001         RETA

   \                                 In  segment CODE, align 2
    212          unsigned int str_to_int(char *num_string){
   \                     str_to_int:
    213            int sum=0;
   \   000000   0E43         MOV.W   #0x0, R14
    214            sum+=1000*((unsigned int)(num_string[0]-'0'));
   \   000002   6F4C         MOV.B   @R12, R15
   \   000004   4F4F         MOV.B   R15, R15
   \   000006   3F50D0FF     ADD.W   #0xffd0, R15
   \   00000A   5F0A         RLAM.W  #0x3, R15
   \   00000C   0D4F         MOV.W   R15, R13
   \   00000E   5F06         RLAM.W  #0x2, R15
   \   000010   0D5F         ADD.W   R15, R13
   \   000012   0F5F         RLA.W   R15
   \   000014   0D5F         ADD.W   R15, R13
   \   000016   0F5F         RLA.W   R15
   \   000018   0D5F         ADD.W   R15, R13
   \   00001A   0F5F         RLA.W   R15
   \   00001C   0D5F         ADD.W   R15, R13
   \   00001E   0F5F         RLA.W   R15
   \   000020   0F5D         ADD.W   R13, R15
   \   000022   0E5F         ADD.W   R15, R14
    215            sum+=100*((unsigned int)(num_string[1]-'0'));
   \   000024   5F4C0100     MOV.B   0x1(R12), R15
   \   000028   4F4F         MOV.B   R15, R15
   \   00002A   3F50D0FF     ADD.W   #0xffd0, R15
   \   00002E   5F06         RLAM.W  #0x2, R15
   \   000030   0D4F         MOV.W   R15, R13
   \   000032   5F0A         RLAM.W  #0x3, R15
   \   000034   0D5F         ADD.W   R15, R13
   \   000036   0F5F         RLA.W   R15
   \   000038   0F5D         ADD.W   R13, R15
   \   00003A   0E5F         ADD.W   R15, R14
    216            sum+=10*((unsigned int)(num_string[2]-'0'));
   \   00003C   5F4C0200     MOV.B   0x2(R12), R15
   \   000040   4F4F         MOV.B   R15, R15
   \   000042   3F50D0FF     ADD.W   #0xffd0, R15
   \   000046                RPT     #0xa
   \   000046   49180E5F     ADDX.W  R15, R14
    217            sum+=1*((unsigned int)(num_string[3]-'0'));
   \   00004A   5F4C0300     MOV.B   0x3(R12), R15
   \   00004E   4F4F         MOV.B   R15, R15
   \   000050   3F50D0FF     ADD.W   #0xffd0, R15
   \   000054   0E5F         ADD.W   R15, R14
    218            return sum;
   \   000056   0C4E         MOV.W   R14, R12
   \   000058   1001         RETA
    219          }

   \                                 In  segment CODE, align 2
    220          void clear_command(){
   \                     clear_command:
    221            for(int j = 0;j<NUM_Command_chars;j++){
   \   000000   0F43         MOV.W   #0x0, R15
   \   000002   073C         JMP     ??clear_command_1
    222              Commands[cur_command][j]=RESET;
   \                     ??clear_command_0:
   \   000004   1E42....     MOV.W   &cur_command, R14
   \   000008   5E0E         RLAM.W  #0x4, R14
   \   00000A   0E5F         ADD.W   R15, R14
   \   00000C   CE43....     MOV.B   #0x0, Commands(R14)
    223            }
   \   000010   1F53         ADD.W   #0x1, R15
   \                     ??clear_command_1:
   \   000012   3F901000     CMP.W   #0x10, R15
   \   000016   F63B         JL      ??clear_command_0
    224          }
   \   000018   1001         RETA

   \                                 In  segment CODE, align 2
    225          void movement_time(unsigned int time){
   \                     movement_time:
    226            TB1CCTL2 &= ~CCIFG;
   \   000000   92C3C603     BIC.W   #0x1, &0x3c6
    227            TB1CCTL2 |= CCIE;
   \   000004   B2D01000C603 BIS.W   #0x10, &0x3c6
    228            if(timer_bits & Movemet_timer){
   \   00000A   B2B01000.... BIT.W   #0x10, &timer_bits
   \   000010   1028         JNC     ??movement_time_0
    229              timerb1_2_cnt++;
   \   000012   9253....     ADD.W   #0x1, &timerb1_2_cnt
    230               timer_bits &= ~Movemet_timer;
   \   000016   B2C01000.... BIC.W   #0x10, &timer_bits
    231              if(timerb1_2_cnt >= time){
   \   00001C   829C....     CMP.W   R12, &timerb1_2_cnt
   \   000020   0828         JNC     ??movement_time_0
    232               TB1CCTL2 &= ~CCIE;
   \   000022   B2C01000C603 BIC.W   #0x10, &0x3c6
    233                timerb1_2_cnt = 0;
   \   000028   8243....     MOV.W   #0x0, &timerb1_2_cnt
    234                
    235                command_state = STOP;
   \   00002C   F240F500.... MOV.B   #0xf5, &command_state
    236              }
    237            }
    238          }
   \                     ??movement_time_0:
   \   000032   1001         RETA
   \   000034                REQUIRE _A_TB1CCTL2_L

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for add_to_queue>`:
   \   000000   ....         DC16 command_queue

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for read_command_queue>`:
   \   000000   ....         DC16 command_queue

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for add_to_time>`:
   \   000000   ....         DC16 time_queue

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for read_time>`:
   \   000000   ....         DC16 time_queue

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WIFI GOT IP\\r\\n">`:
   \   000000   574946492047 DC8 "WIFI GOT IP\015\012"
   \            4F542049500D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+SYSSTORE=0\\r\\n">`:
   \   000000   41542B535953 DC8 "AT+SYSSTORE=0\015\012"
   \            53544F52453D
   \            300D0A00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A00   DC8 "OK\015\012"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPMUX=1\015\012"
   \            4D55583D310D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPSERVER=1,4200\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPSERVER=1,4200\015\012"
   \            534552564552
   \            3D312C343230
   \            300D0A00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CWJAP?\\r\\n">`:
   \   000000   41542B43574A DC8 "AT+CWJAP?\015\012"
   \            41503F0D0A00

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIFSR\\r\\n">`:
   \   000000   41542B434946 DC8 "AT+CIFSR\015\012"
   \            53520D0A00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "1234">`:
   \   000000   3132333400   DC8 "1234"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Command_state
        4   -> do_for
        4   -> get_command
        4   -> move
        4   -> process_command
        4   -> stop
      4   IOT_main
        4   -> Connecting_machine
        4   -> Display_Process
        4   -> iot_wifi_connect
      4   clear_command
      4   iot_wifi_connect
        4   -> clear_display
        4   -> get_connected
        4   -> get_from_serial
        4   -> process_buffer_0
        4   -> send
      4   movement_time
     12   process_command
       12   -> clear_command
       12   -> str_to_int
       12   -> strncmp
       12   -> strncpy
      4   str_to_int


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant "1234">
      11  ?<Constant "AT+CIFSR\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      22  ?<Constant "AT+CIPSERVER=1,4200\r\n">
      12  ?<Constant "AT+CWJAP?\r\n">
      16  ?<Constant "AT+SYSSTORE=0\r\n">
       5  ?<Constant "OK\r\n">
      14  ?<Constant "WIFI GOT IP\r\n">
       2  ?<Initializer for add_to_queue>
       2  ?<Initializer for add_to_time>
       2  ?<Initializer for read_command_queue>
       2  ?<Initializer for read_time>
     298  Command_state
       2  IOT_bits
      50  IOT_main
       1  IOT_state
       1  IOT_state_mem
       2  _A_PBOUT_L
       2  _A_TB1CCTL2_L
       2  add_to_queue
       2  add_to_time
      26  clear_command
      50  command_queue
       1  command_state
       2  commmand_time
       2  cur_command
     268  iot_wifi_connect
      52  movement_time
     276  process_command
       2  read_command_queue
       2  read_time
      90  str_to_int
     100  time_queue
       2  timerb1_2_cnt

 
 1 060 bytes in segment CODE
     4 bytes in segment DATA16_AN
    99 bytes in segment DATA16_C
     8 bytes in segment DATA16_I
     8 bytes in segment DATA16_ID
   161 bytes in segment DATA16_Z
 
 1 060 bytes of CODE  memory
   107 bytes of CONST memory
   169 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
