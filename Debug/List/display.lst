###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          15/Nov/2022  23:16:33
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\display.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EW4DD3.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\display.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ohs --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\display.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\display.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\display.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the functions of controling the display.
      4          //
      5          //
      6          //  Tobias Desotelle
      7          //  September 20 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //--------------------------------------------------------------------------
     10          #include "macros.h"
     11          extern volatile unsigned char update_display;
     12          extern volatile unsigned char display_changed;
     13          extern char display_line[DISPLAYLINES][DISPLAYCHARS];
     14          extern volatile unsigned short display_bits;
     15          
     16          

   \                                 In  segment CODE, align 2, keep-with-next
     17          void Init_Display(void){
   \                     Init_Display:
     18              strcpy(display_line[DISPLAY0], "  MSP 430 ");
   \   000000   3D40....     MOV.W   #`?<Constant "  MSP 430 ">`, R13
   \   000004   3C40....     MOV.W   #display_line, R12
   \   000008   ........     CALLA   #strcpy
     19              strcpy(display_line[DISPLAY1], "Powered on");
   \   00000C   3D40....     MOV.W   #`?<Constant "Powered on">`, R13
   \   000010   3C40....     MOV.W   #display_line + 11, R12
   \   000014   ........     CALLA   #strcpy
     20              strcpy(display_line[DISPLAY2], "          ");
   \   000018   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001C   3C40....     MOV.W   #display_line + 22, R12
   \   000020   ........     CALLA   #strcpy
     21              strcpy(display_line[DISPLAY3], "          ");
   \   000024   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000028   3C40....     MOV.W   #display_line + 33, R12
   \   00002C                REQUIRE ?Subroutine0
   \   00002C                // Fall through to label ?Subroutine0
     22            display_changed = TRUE;
     23            update_display=UPDATED;
     24            Display_Process();
     25            
     26          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   ........     CALLA   #strcpy
   \   000004   D243....     MOV.B   #0x1, &display_changed
   \   000008   D243....     MOV.B   #0x1, &update_display
   \                     ??Subroutine0_0:
   \   00000C   C293....     CMP.B   #0x0, &update_display
   \   000010   0D24         JEQ     ??Subroutine0_1
   \   000012   C243....     MOV.B   #0x0, &update_display
   \   000016   C293....     CMP.B   #0x0, &display_changed
   \   00001A   0824         JEQ     ??Subroutine0_1
   \   00001C   C243....     MOV.B   #0x0, &display_changed
   \   000020   4F43         MOV.B   #0x0, R15
   \   000022   4E43         MOV.B   #0x0, R14
   \   000024   4D43         MOV.B   #0x0, R13
   \   000026   4C43         MOV.B   #0x0, R12
   \   000028   ........     CALLA   #Display_Update
   \                     ??Subroutine0_1:
   \   00002C   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
     27          void Init_Display_1(void){
   \                     Init_Display_1:
     28              lcd_BIG_mid();
   \   000000   ........     CALLA   #lcd_BIG_mid
     29              strcpy(display_line[DISPLAY0], "Tobias    ");
   \   000004   3D40....     MOV.W   #`?<Constant "Tobias    ">`, R13
   \   000008   3C40....     MOV.W   #display_line, R12
   \   00000C   ........     CALLA   #strcpy
     30              strcpy(display_line[DISPLAY1], "Homework 9");
   \   000010   3D40....     MOV.W   #`?<Constant "Homework 9">`, R13
   \   000014   3C40....     MOV.W   #display_line + 11, R12
   \   000018   ........     CALLA   #strcpy
     31              strcpy(display_line[DISPLAY2], "Desotelle ");
   \   00001C   3D40....     MOV.W   #`?<Constant "Desotelle ">`, R13
   \   000020   3C40....     MOV.W   #display_line + 22, R12
   \   000024   ....         JMP     ?Subroutine0
   \   000026   0343         NOP
     32            display_changed = TRUE;
     33            update_display=UPDATED;
     34            Display_Process();
     35          }

   \                                 In  segment CODE, align 2
     36          void Display_Process(void){
   \                     Display_Process:
     37            if(update_display){
   \   000000   ....         JMP     ??Subroutine0_0
   \   000002   0343         NOP
     38              update_display = RESET_STATE;
     39              if(display_changed){
     40                display_changed = RESET_STATE;
     41                Display_Update(RESET_STATE,RESET_STATE,RESET_STATE,RESET_STATE);
     42              }
     43            }
     44          }

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char ani_state;
   \                     ani_state:
   \   000000                DS8 1

   \                                 In  segment CODE, align 2
     46          void waiting_animation(){
   \                     waiting_animation:
   \   000000   0A12         PUSH.W  R10
     47            switch(ani_state){
   \   000002   5E42....     MOV.B   &ani_state, R14
   \   000006   4E83         SUB.B   #0x0, R14
   \   000008   0524         JEQ     ??waiting_animation_2
   \   00000A   5E83         SUB.B   #0x1, R14
   \   00000C   0D24         JEQ     ??waiting_animation_3
   \   00000E   5E83         SUB.B   #0x1, R14
   \   000010   1524         JEQ     ??waiting_animation_4
   \   000012   1C3C         JMP     ??waiting_animation_0
     48            case 0:
     49              change_display_line(WAITING1,DISPLAY0);
   \                     ??waiting_animation_2:
   \   000014   3D40....     MOV.W   #`?<Constant "Waiting.  ">`, R13
   \   000018   3C40....     MOV.W   #display_line, R12
   \   00001C   ........     CALLA   #strcpy
   \   000020   D243....     MOV.B   #0x1, &display_changed
     50              ani_state++;
   \   000024   5A43         MOV.B   #0x1, R10
     51              break;
   \   000026   133C         JMP     ??waiting_animation_1
     52            case 1:
     53              ani_state++;
   \                     ??waiting_animation_3:
   \   000028   6A43         MOV.B   #0x2, R10
     54              change_display_line(WAITING2,DISPLAY0);
   \   00002A   3D40....     MOV.W   #`?<Constant "Waiting.. ">`, R13
   \   00002E   3C40....     MOV.W   #display_line, R12
   \   000032   ........     CALLA   #strcpy
   \   000036   D243....     MOV.B   #0x1, &display_changed
     55              break;
   \   00003A   093C         JMP     ??waiting_animation_1
     56            case 2:
     57              change_display_line(WAITING3,DISPLAY0);
   \                     ??waiting_animation_4:
   \   00003C   3D40....     MOV.W   #`?<Constant "Waiting...">`, R13
   \   000040   3C40....     MOV.W   #display_line, R12
   \   000044   ........     CALLA   #strcpy
   \   000048   D243....     MOV.B   #0x1, &display_changed
     58              ani_state=0;
     59              break;
     60            default:
     61              ani_state=0;
   \                     ??waiting_animation_0:
   \   00004C   4A43         MOV.B   #0x0, R10
     62              break;
   \                     ??waiting_animation_1:
   \   00004E   C24A....     MOV.B   R10, &ani_state
     63            } 
     64            
     65            
     66          }
   \   000052   3A41         POP.W   R10
   \   000054   1001         RETA

   \                                 In  segment CODE, align 2
     67          void serial_display(){
   \                     serial_display:
     68            
     69            
     70            
     71          }
   \   000000   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
     72          void clear_line(unsigned int line){
   \                     clear_line:
     73            strcpy(display_line[line], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   0F4C         MOV.W   R12, R15
   \   000006   0C5C         RLA.W   R12
   \   000008   0F5C         ADD.W   R12, R15
   \   00000A   5C06         RLAM.W  #0x2, R12
   \   00000C   0C5F         ADD.W   R15, R12
   \   00000E   3C50....     ADD.W   #display_line, R12
   \   000012                REQUIRE ?Subroutine1
   \   000012                // Fall through to label ?Subroutine1
     74            display_changed=DISPLAYCHANGED;
     75          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   ........     CALLA   #strcpy
   \   000004   D243....     MOV.B   #0x1, &display_changed
   \   000008   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
     76          void clear_display(){
   \                     clear_display:
   \   000000   0A12         PUSH.W  R10
     77            clear_line(DISPLAY0);
   \   000002   3A40....     MOV.W   #`?<Constant "          ">`, R10
   \   000006   0D4A         MOV.W   R10, R13
   \   000008   3C40....     MOV.W   #display_line, R12
   \   00000C   ........     CALLA   #strcpy
   \   000010   D243....     MOV.B   #0x1, &display_changed
     78            clear_line(DISPLAY1);
   \   000014   0D4A         MOV.W   R10, R13
   \   000016   3C40....     MOV.W   #display_line + 11, R12
   \   00001A   ........     CALLA   #strcpy
   \   00001E   D243....     MOV.B   #0x1, &display_changed
     79            clear_line(DISPLAY2); 
   \   000022   0D4A         MOV.W   R10, R13
   \   000024   3C40....     MOV.W   #display_line + 22, R12
   \   000028   ........     CALLA   #strcpy
   \   00002C   D243....     MOV.B   #0x1, &display_changed
     80            clear_line(DISPLAY3);
   \   000030   0D4A         MOV.W   R10, R13
   \   000032   3C40....     MOV.W   #display_line + 33, R12
   \   000036   ........     CALLA   #strcpy
   \   00003A                REQUIRE ?Subroutine2
   \   00003A                // Fall through to label ?Subroutine2
     81          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   000000   D243....     MOV.B   #0x1, &display_changed
   \   000004   3A41         POP.W   R10
   \   000006   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
     82          void change_display_line(char *text,int line){ 
   \                     change_display_line:
   \   000000   0F4D         MOV.W   R13, R15
     83            strcpy(display_line[line], text);
   \   000002   0D4C         MOV.W   R12, R13
   \   000004   0E4F         MOV.W   R15, R14
   \   000006   0F5F         RLA.W   R15
   \   000008   0E5F         ADD.W   R15, R14
   \   00000A   5F06         RLAM.W  #0x2, R15
   \   00000C   0F5E         ADD.W   R14, R15
   \   00000E   3F50....     ADD.W   #display_line, R15
   \   000012   0C4F         MOV.W   R15, R12
   \   000014   ....         JMP     ?Subroutine1
   \   000016   0343         NOP
     84            display_changed=DISPLAYCHANGED;
     85          }

   \                                 In  segment CODE, align 2, keep-with-next
     86          void change_display_adc(char *text,unsigned int line){ 
   \                     change_display_adc:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     87            
     88            //text[]
     89            text[4]=' ';
   \   000004   FC4020000400 MOV.B   #0x20, 0x4(R12)
     90            text[5]=' ';
   \   00000A   FC4020000500 MOV.B   #0x20, 0x5(R12)
     91            text[6]='\0';
   \   000010   CC430600     MOV.B   #0x0, 0x6(R12)
     92            //text[7]='\0';
     93            switch(line){
   \   000014   0D83         SUB.W   #0x0, R13
   \   000016   0524         JEQ     ??change_display_adc_2
   \   000018   1D83         SUB.W   #0x1, R13
   \   00001A   0B24         JEQ     ??change_display_adc_3
   \   00001C   1D83         SUB.W   #0x1, R13
   \   00001E   1324         JEQ     ??change_display_adc_4
   \   000020   1D3C         JMP     ??change_display_adc_1
     94            
     95            case DISPLAY0:
     96              strcpy(display_line[0],DETECT_L_STRING );
   \                     ??change_display_adc_2:
   \   000022   3D40....     MOV.W   #`?<Constant "DL=">`, R13
   \   000026   3C40....     MOV.W   #display_line, R12
   \   00002A   ........     CALLA   #strcpy
     97              strcat(display_line[0],text);
   \   00002E   0D4A         MOV.W   R10, R13
   \   000030   133C         JMP     ??change_display_adc_0
     98              break;
     99            case DISPLAY1:
    100              strcpy(display_line[1],DETECT_R_STRING );
   \                     ??change_display_adc_3:
   \   000032   3D40....     MOV.W   #`?<Constant "DR=">`, R13
   \   000036   3C40....     MOV.W   #display_line + 11, R12
   \   00003A   ........     CALLA   #strcpy
    101              strcat(display_line[1],text);
   \   00003E   0D4A         MOV.W   R10, R13
   \   000040   3C40....     MOV.W   #display_line + 11, R12
   \   000044   093C         JMP     ??change_display_adc_0
    102              break;
    103            case DISPLAY2:
    104              strcpy(display_line[2],V_THUMB_STRING );
   \                     ??change_display_adc_4:
   \   000046   3D40....     MOV.W   #`?<Constant "VT=">`, R13
   \   00004A   3C40....     MOV.W   #display_line + 22, R12
   \   00004E   ........     CALLA   #strcpy
    105              strcat(display_line[2],text);
   \   000052   0D4A         MOV.W   R10, R13
   \   000054   3C40....     MOV.W   #display_line + 22, R12
   \                     ??change_display_adc_0:
   \   000058   ........     CALLA   #strcat
    106              break;
    107            case DISPLAY3:
    108              break;
    109            default:
    110              break;
    111            } 
    112            display_changed=DISPLAYCHANGED;
   \                     ??change_display_adc_1:
   \   00005C   ....         JMP     ?Subroutine2
   \   00005E   0343         NOP
    113          }

   \                                 In  segment CODE, align 2
    114          void main_menu_display(int line){
   \                     main_menu_display:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
    115            strcpy(display_line[DISPLAY0], Settings_dis);
   \   000004   3D40....     MOV.W   #`?<Constant "  Settings">`, R13
   \   000008   3C40....     MOV.W   #display_line, R12
   \   00000C   ........     CALLA   #strcpy
    116            strcpy(display_line[DISPLAY1], Adc_disp);
   \   000010   3D40....     MOV.W   #`?<Constant "  ADC Vals">`, R13
   \   000014   3C40....     MOV.W   #display_line + 11, R12
   \   000018   ........     CALLA   #strcpy
    117            strcpy(display_line[DISPLAY2], Pid_menu);
   \   00001C   3D40....     MOV.W   #`?<Constant "  PID Tune">`, R13
   \   000020   3C40....     MOV.W   #display_line + 22, R12
   \   000024   ........     CALLA   #strcpy
    118            strcpy(display_line[DISPLAY3], CLEAR_DISPLAY);
   \   000028   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00002C   3C40....     MOV.W   #display_line + 33, R12
   \   000030   ........     CALLA   #strcpy
    119            switch(line){
   \   000034   0A83         SUB.W   #0x0, R10
   \   000036   0724         JEQ     ??main_menu_display_1
   \   000038   1A83         SUB.W   #0x1, R10
   \   00003A   0C24         JEQ     ??main_menu_display_2
   \   00003C   1A83         SUB.W   #0x1, R10
   \   00003E   1124         JEQ     ??main_menu_display_3
   \   000040   1A83         SUB.W   #0x1, R10
   \   000042   0F24         JEQ     ??main_menu_display_3
   \   000044   143C         JMP     ??main_menu_display_0
    120            case 0x00:
    121              display_line[DISPLAY0][0] = '-';
   \                     ??main_menu_display_1:
   \   000046   F2402D00.... MOV.B   #0x2d, &display_line
    122              display_line[DISPLAY0][1] = '>';
   \   00004C   F2403E00.... MOV.B   #0x3e, &display_line + 1
    123              break;
   \   000052   0D3C         JMP     ??main_menu_display_0
    124            case 0x01:
    125              display_line[DISPLAY1][0] = '-';
   \                     ??main_menu_display_2:
   \   000054   F2402D00.... MOV.B   #0x2d, &display_line + 11
    126              display_line[DISPLAY1][1] = '>';
   \   00005A   F2403E00.... MOV.B   #0x3e, &display_line + 12
    127              break;
   \   000060   063C         JMP     ??main_menu_display_0
    128            case 0x03:
    129            case 0x02:
    130              display_line[DISPLAY2][0] = '-';
   \                     ??main_menu_display_3:
   \   000062   F2402D00.... MOV.B   #0x2d, &display_line + 22
    131              display_line[DISPLAY2][1] = '>';
   \   000068   F2403E00.... MOV.B   #0x3e, &display_line + 23
    132              break;
    133            }
    134            display_changed=DISPLAYCHANGED;
   \                     ??main_menu_display_0:
   \   00006E   ....         JMP     ?Subroutine2
   \   000070   0343         NOP
    135          }

   \                                 In  segment CODE, align 2
    136          void adc_menu_display(){
   \                     adc_menu_display:
    137            
    138            
    139          }
   \   000000   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  MSP 430 ">`:
   \   000000   20204D535020 DC8 "  MSP 430 "
   \            3433302000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Powered on">`:
   \   000000   506F77657265 DC8 "Powered on"
   \            64206F6E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Tobias    ">`:
   \   000000   546F62696173 DC8 "Tobias    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Homework 9">`:
   \   000000   486F6D65776F DC8 "Homework 9"
   \            726B203900  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Desotelle ">`:
   \   000000   4465736F7465 DC8 "Desotelle "
   \            6C6C652000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Waiting.  ">`:
   \   000000   57616974696E DC8 "Waiting.  "
   \            672E202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Waiting.. ">`:
   \   000000   57616974696E DC8 "Waiting.. "
   \            672E2E2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Waiting...">`:
   \   000000   57616974696E DC8 "Waiting..."
   \            672E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "DL=">`:
   \   000000   444C3D00     DC8 "DL="

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "DR=">`:
   \   000000   44523D00     DC8 "DR="

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "VT=">`:
   \   000000   56543D00     DC8 "VT="

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Settings">`:
   \   000000   202053657474 DC8 "  Settings"
   \            696E677300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ADC Vals">`:
   \   000000   202041444320 DC8 "  ADC Vals"
   \            56616C7300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  PID Tune">`:
   \   000000   202050494420 DC8 "  PID Tune"
   \            54756E6500  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Display_Process
        4   -> Display_Update
      4   Init_Display
        4   -> Display_Update
        4   -> strcpy
      4   Init_Display_1
        4   -> Display_Update
        4   -> lcd_BIG_mid
        4   -> strcpy
      4   adc_menu_display
      6   change_display_adc
        6   -> strcat
        6   -> strcpy
      4   change_display_line
        4   -> strcpy
      6   clear_display
        6   -> strcpy
      4   clear_line
        4   -> strcpy
      6   main_menu_display
        6   -> strcpy
      4   serial_display
      6   waiting_animation
        6   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  ADC Vals">
      11  ?<Constant "  MSP 430 ">
      11  ?<Constant "  PID Tune">
      11  ?<Constant "  Settings">
       4  ?<Constant "DL=">
       4  ?<Constant "DR=">
      11  ?<Constant "Desotelle ">
      11  ?<Constant "Homework 9">
      11  ?<Constant "Powered on">
      11  ?<Constant "Tobias    ">
       4  ?<Constant "VT=">
      11  ?<Constant "Waiting.  ">
      11  ?<Constant "Waiting.. ">
      11  ?<Constant "Waiting...">
      46  ?Subroutine0
      10  ?Subroutine1
       8  ?Subroutine2
       4  Display_Process
      44  Init_Display
      40  Init_Display_1
       2  adc_menu_display
       1  ani_state
      96  change_display_adc
      24  change_display_line
      58  clear_display
      18  clear_line
     114  main_menu_display
       2  serial_display
      86  waiting_animation

 
 552 bytes in segment CODE
 144 bytes in segment DATA16_C
   1 byte  in segment DATA16_Z
 
 552 bytes of CODE  memory
 144 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
