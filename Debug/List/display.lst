###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          17/Nov/2022  23:51:36
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\display.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EW1F0E.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\display.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\display.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\display.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\display.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the functions of controling the display.
      4          //
      5          //
      6          //  Tobias Desotelle
      7          //  September 20 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //--------------------------------------------------------------------------
     10          #include "macros.h"
     11          extern volatile unsigned char update_display;
     12          extern volatile unsigned char display_changed;
     13          extern char display_line[DISPLAYLINES][DISPLAYCHARS];
     14          extern volatile unsigned short display_bits;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          char ani_state;
   \                     ani_state:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned char connect_state;
   \                     connect_state:
   \   000000                DS8 1
     17          extern char IP_Addy[21];
     18          extern char SSID[11];
     19          
     20          
     21          #define Trying_to_connect	(0x00)

   \                                 In  segment CODE, align 2, keep-with-next
     22          void Connecting_machine(){
   \                     Connecting_machine:
     23            switch(connect_state){
   \   000000   5E42....     MOV.B   &connect_state, R14
   \   000004   4E83         SUB.B   #0x0, R14
   \   000006   0424         JEQ     ??Connecting_machine_1
   \   000008   7E800500     SUB.B   #0x5, R14
   \   00000C   0A24         JEQ     ??Connecting_machine_2
   \   00000E   1001         RETA
     24            case Trying_to_connect:
     25              Connecting_Display();
   \                     ??Connecting_machine_1:
   \   000010   ........     CALLA   #Connecting_Display
     26              if(display_bits & Display_IP)connect_state = IP_Display;
   \   000014   A2B2....     BIT.W   #0x4, &display_bits
   \   000018   0624         JEQ     ??Connecting_machine_0
   \   00001A   F2400500.... MOV.B   #0x5, &connect_state
   \   000020   1001         RETA
     27              break;
     28            case IP_Display:
     29              display_IP();
   \                     ??Connecting_machine_2:
   \   000022   ........     CALLA   #display_IP
     30              break;
     31            }
     32            
     33          }
   \                     ??Connecting_machine_0:
   \   000026   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   ........     CALLA   #strcpy
   \   000004   D243....     MOV.B   #0x1, &display_changed
   \   000008   D243....     MOV.B   #0x1, &update_display
   \   00000C   ........     BRA     #Display_Process

   \                                 In  segment CODE, align 2, keep-with-next
     34          void Init_Display(void){
   \                     Init_Display:
     35              strcpy(display_line[DISPLAY0], "  MSP 430 ");
   \   000000   3D40....     MOV.W   #`?<Constant "  MSP 430 ">`, R13
   \   000004   ........     CALLA   #?Subroutine4
     36              strcpy(display_line[DISPLAY1], "Powered on");
   \                     ??CrossCallReturnLabel_2:
   \   000008   3D40....     MOV.W   #`?<Constant "Powered on">`, R13
   \   00000C   ........     CALLA   #?Subroutine6
     37              strcpy(display_line[DISPLAY2], "          ");
   \                     ??CrossCallReturnLabel_8:
   \   000010   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000014   ........     CALLA   #?Subroutine5
     38              strcpy(display_line[DISPLAY3], "          ");
   \                     ??CrossCallReturnLabel_4:
   \   000018   ....         JMP     ??Subroutine7_0
   \   00001A   0343         NOP
     39            display_changed = TRUE;
     40            update_display=UPDATED;
     41            Display_Process();
     42            
     43          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   000000   3C40....     MOV.W   #display_line + 11, R12
   \   000004   ........     BRA     #strcpy

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   000000   3C40....     MOV.W   #display_line, R12
   \   000004   ........     BRA     #strcpy

   \                                 In  segment CODE, align 2
   \                     ?Subroutine5:
   \   000000   3C40....     MOV.W   #display_line + 22, R12
   \   000004   ........     CALLA   #strcpy
   \   000008   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00000C   3C40....     MOV.W   #display_line + 33, R12
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   000000   3D40....     MOV.W   #`?<Constant "Connecting">`, R13
   \   000004   ........     CALLA   #?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   000008   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00000C   3C40....     MOV.W   #display_line + 11, R12
   \   000010                REQUIRE ??Subroutine7_0
   \   000010                // Fall through to label ??Subroutine7_0

   \                                 In  segment CODE, align 2, keep-with-next
     44          void Init_Display_1(void){
   \                     Init_Display_1:
     45              //lcd_BIG_mid();
     46              strcpy(display_line[DISPLAY0], "Connecting");
   \   000000   ....         JMP     ?Subroutine3
   \   000002   0343         NOP
     47              strcpy(display_line[DISPLAY1], "          ");
     48              //strcpy(display_line[DISPLAY2], "Desotelle ");
     49            display_changed = TRUE;
     50            update_display=UPDATED;
     51            Display_Process();
     52          }

   \                                 In  segment CODE, align 2, keep-with-next
     53          void Connecting_Display(void){
   \                     Connecting_Display:
     54              //lcd_BIG_mid();
     55              strcpy(display_line[DISPLAY0], "Connecting");
   \   000000                REQUIRE ?Subroutine3
   \   000000                // Fall through to label ?Subroutine3
     56              strcpy(display_line[DISPLAY1], "          ");
     57              //strcpy(display_line[DISPLAY2], "Desotelle ");
     58            display_changed = TRUE;
     59            update_display=UPDATED;
     60            Display_Process();
     61          }

   \                                 In  segment CODE, align 2
     62          void Display_Process(void){
   \                     Display_Process:
     63            if(update_display){
   \   000000   C293....     CMP.B   #0x0, &update_display
   \   000004   0D24         JEQ     ??Display_Process_0
     64              update_display = RESET_STATE;
   \   000006   C243....     MOV.B   #0x0, &update_display
     65              if(display_changed){
   \   00000A   C293....     CMP.B   #0x0, &display_changed
   \   00000E   0824         JEQ     ??Display_Process_0
     66                display_changed = RESET_STATE;
   \   000010   C243....     MOV.B   #0x0, &display_changed
     67                Display_Update(RESET_STATE,RESET_STATE,RESET_STATE,RESET_STATE);
   \   000014   4F43         MOV.B   #0x0, R15
   \   000016   4E43         MOV.B   #0x0, R14
   \   000018   4D43         MOV.B   #0x0, R13
   \   00001A   4C43         MOV.B   #0x0, R12
   \   00001C   ........     CALLA   #Display_Update
     68              }
     69            }
     70          }
   \                     ??Display_Process_0:
   \   000020   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
     71          void display_IP(){
   \                     display_IP:
   \   000000   B1000C00     SUBA    #0xc, SP
     72            if(display_bits & Display_IP){
   \   000004   A2B2....     BIT.W   #0x4, &display_bits
   \   000008   0D43         MOV.W   #0x0, R13
   \   00000A   1D28         JNC     ??display_IP_1
     73              	char temp_ip[11];
     74          	//strncpy(temp_ip,SSID,10);
     75          	change_display_line("connected ",DISPLAY0);
   \   00000C   3C40....     MOV.W   #`?<Constant "connected ">`, R12
   \   000010   ........     CALLA   #change_display_line
     76              	change_display_line(SSID,DISPLAY1);
   \   000014   1D43         MOV.W   #0x1, R13
   \   000016   3C40....     MOV.W   #SSID, R12
   \   00001A   ........     CALLA   #change_display_line
     77            	strncpy(temp_ip,IP_Addy,10);
   \   00001E   3E400A00     MOV.W   #0xa, R14
   \   000022   3D40....     MOV.W   #IP_Addy, R13
   \   000026   0C41         MOV.W   SP, R12
   \   000028   ........     CALLA   #strncpy
     78          	change_display_line(temp_ip,DISPLAY2);
   \   00002C   2D43         MOV.W   #0x2, R13
   \   00002E   ........     CALLA   #change_display_line
     79          	strncpy(temp_ip,&IP_Addy[10],10);
   \   000032   3E400A00     MOV.W   #0xa, R14
   \   000036   3D40....     MOV.W   #IP_Addy + 10, R13
   \   00003A   0C41         MOV.W   SP, R12
   \   00003C   ........     CALLA   #strncpy
     80          	change_display_line(temp_ip,DISPLAY3);
   \   000040   3D400300     MOV.W   #0x3, R13
   \   000044   023C         JMP     ??display_IP_0
     81          	
     82            }
     83            else{
     84              change_display_line("connecting",DISPLAY0);
   \                     ??display_IP_1:
   \   000046   3C40....     MOV.W   #`?<Constant "connecting">`, R12
   \                     ??display_IP_0:
   \   00004A   ........     CALLA   #change_display_line
     85            }
     86            display_changed = TRUE;
   \   00004E   D243....     MOV.B   #0x1, &display_changed
     87            update_display=UPDATED;
   \   000052   D243....     MOV.B   #0x1, &update_display
     88            Display_Process();
   \   000056   ........     CALLA   #Display_Process
     89          }
   \   00005A   A1000C00     ADDA    #0xc, SP
   \   00005E   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
     90          void waiting_animation(){
   \                     waiting_animation:
     91            switch(ani_state){
   \   000000   5E42....     MOV.B   &ani_state, R14
   \   000004   4E83         SUB.B   #0x0, R14
   \   000006   0524         JEQ     ??waiting_animation_1
   \   000008   5E83         SUB.B   #0x1, R14
   \   00000A   0B24         JEQ     ??waiting_animation_2
   \   00000C   5E83         SUB.B   #0x1, R14
   \   00000E   1024         JEQ     ??waiting_animation_3
   \   000010   153C         JMP     ??waiting_animation_0
     92            case 0:
     93              change_display_line(WAITING1,DISPLAY0);
   \                     ??waiting_animation_1:
   \   000012   0D43         MOV.W   #0x0, R13
   \   000014   3C40....     MOV.W   #`?<Constant "Waiting.  ">`, R12
   \   000018   ........     CALLA   #change_display_line
     94              ani_state++;
   \   00001C   D253....     ADD.B   #0x1, &ani_state
     95              break;
   \   000020   1001         RETA
     96            case 1:
     97              ani_state++;
   \                     ??waiting_animation_2:
   \   000022   E243....     MOV.B   #0x2, &ani_state
     98              change_display_line(WAITING2,DISPLAY0);
   \   000026   0D43         MOV.W   #0x0, R13
   \   000028   3C40....     MOV.W   #`?<Constant "Waiting.. ">`, R12
   \   00002C   ........     BRA     #change_display_line
     99              break;
    100            case 2:
    101              change_display_line(WAITING3,DISPLAY0);
   \                     ??waiting_animation_3:
   \   000030   0D43         MOV.W   #0x0, R13
   \   000032   3C40....     MOV.W   #`?<Constant "Waiting...">`, R12
   \   000036   ........     CALLA   #change_display_line
    102              ani_state=0;
   \   00003A   ....         JMP     ?Subroutine2
    103              break;
    104            default:
    105              ani_state=0;
   \                     ??waiting_animation_0:
   \   00003C                REQUIRE ?Subroutine2
   \   00003C                // Fall through to label ?Subroutine2
    106              break;
    107            } 
    108            
    109            
    110          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   000000   C243....     MOV.B   #0x0, &ani_state
   \   000004   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
    111          void serial_display(){
   \                     serial_display:
    112            
    113            
    114            
    115          }
   \   000000   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000                RPT     #0xa
   \   000000   49180C5F     ADDX.W  R15, R12
   \   000004   3C50....     ADD.W   #display_line, R12
   \   000008   ........     CALLA   #strcpy
   \   00000C   D243....     MOV.B   #0x1, &display_changed
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2
    116          void clear_line(unsigned int line){
   \                     clear_line:
    117            strcpy(display_line[line], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   0F4C         MOV.W   R12, R15
   \   000006   ....         JMP     ?Subroutine0
   \   000008   0343         NOP
    118            display_changed=DISPLAYCHANGED;
    119          }

   \                                 In  segment CODE, align 2
    120          void clear_display(){
   \                     clear_display:
    121            clear_line(DISPLAY0);
   \   000000   0C43         MOV.W   #0x0, R12
   \   000002   ........     CALLA   #clear_line
    122            clear_line(DISPLAY1);
   \   000006   1C43         MOV.W   #0x1, R12
   \   000008   ........     CALLA   #clear_line
    123            clear_line(DISPLAY2); 
   \   00000C   2C43         MOV.W   #0x2, R12
   \   00000E   ........     CALLA   #clear_line
    124            clear_line(DISPLAY3);
   \   000012   3C400300     MOV.W   #0x3, R12
   \   000016   ........     BRA     #clear_line
    125          }

   \                                 In  segment CODE, align 2, keep-with-next
    126          void change_display_line(char *text,int line){ 
   \                     change_display_line:
   \   000000   0F4D         MOV.W   R13, R15
    127            strcpy(display_line[line], text);
   \   000002   0D4C         MOV.W   R12, R13
   \   000004   0C4F         MOV.W   R15, R12
   \   000006                REQUIRE ?Subroutine0
   \   000006                // Fall through to label ?Subroutine0
    128            display_changed=DISPLAYCHANGED;
    129          }

   \                                 In  segment CODE, align 2, keep-with-next
    130          void change_display_adc(char *text,unsigned int line){ 
   \                     change_display_adc:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
    131            
    132            //text[]
    133            text[4]=' ';
   \   000004   FC4020000400 MOV.B   #0x20, 0x4(R12)
    134            text[5]=' ';
   \   00000A   FC4020000500 MOV.B   #0x20, 0x5(R12)
    135            text[6]='\0';
   \   000010   CC430600     MOV.B   #0x0, 0x6(R12)
    136            //text[7]='\0';
    137            switch(line){
   \   000014   0D83         SUB.W   #0x0, R13
   \   000016   0524         JEQ     ??change_display_adc_2
   \   000018   1D83         SUB.W   #0x1, R13
   \   00001A   0924         JEQ     ??change_display_adc_3
   \   00001C   1D83         SUB.W   #0x1, R13
   \   00001E   0F24         JEQ     ??change_display_adc_4
   \   000020   193C         JMP     ??change_display_adc_1
    138            
    139            case DISPLAY0:
    140              strcpy(display_line[0],DETECT_L_STRING );
   \                     ??change_display_adc_2:
   \   000022   3D40....     MOV.W   #`?<Constant "DL=">`, R13
   \   000026   ........     CALLA   #?Subroutine4
    141              strcat(display_line[0],text);
   \                     ??CrossCallReturnLabel_1:
   \   00002A   0D4A         MOV.W   R10, R13
   \   00002C   113C         JMP     ??change_display_adc_0
    142              break;
    143            case DISPLAY1:
    144              strcpy(display_line[1],DETECT_R_STRING );
   \                     ??change_display_adc_3:
   \   00002E   3D40....     MOV.W   #`?<Constant "DR=">`, R13
   \   000032   ........     CALLA   #?Subroutine6
    145              strcat(display_line[1],text);
   \                     ??CrossCallReturnLabel_7:
   \   000036   0D4A         MOV.W   R10, R13
   \   000038   3C40....     MOV.W   #display_line + 11, R12
   \   00003C   093C         JMP     ??change_display_adc_0
    146              break;
    147            case DISPLAY2:
    148              strcpy(display_line[2],V_THUMB_STRING );
   \                     ??change_display_adc_4:
   \   00003E   3D40....     MOV.W   #`?<Constant "VT=">`, R13
   \   000042   3C40....     MOV.W   #display_line + 22, R12
   \   000046   ........     CALLA   #strcpy
    149              strcat(display_line[2],text);
   \   00004A   0D4A         MOV.W   R10, R13
   \   00004C   3C40....     MOV.W   #display_line + 22, R12
   \                     ??change_display_adc_0:
   \   000050   ........     CALLA   #strcat
    150              break;
    151            case DISPLAY3:
    152              break;
    153            default:
    154              break;
    155            } 
    156            display_changed=DISPLAYCHANGED;
   \                     ??change_display_adc_1:
   \   000054                REQUIRE ?Subroutine1
   \   000054                // Fall through to label ?Subroutine1
    157          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   D243....     MOV.B   #0x1, &display_changed
   \   000004   3A41         POP.W   R10
   \   000006   1001         RETA

   \                                 In  segment CODE, align 2
    158          void main_menu_display(int line){
   \                     main_menu_display:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
    159            strcpy(display_line[DISPLAY0], Settings_dis);
   \   000004   3D40....     MOV.W   #`?<Constant "  Settings">`, R13
   \   000008   ........     CALLA   #?Subroutine4
    160            strcpy(display_line[DISPLAY1], Adc_disp);
   \                     ??CrossCallReturnLabel_0:
   \   00000C   3D40....     MOV.W   #`?<Constant "  ADC Vals">`, R13
   \   000010   ........     CALLA   #?Subroutine6
    161            strcpy(display_line[DISPLAY2], Pid_menu);
   \                     ??CrossCallReturnLabel_6:
   \   000014   3D40....     MOV.W   #`?<Constant "  PID Tune">`, R13
   \   000018   ........     CALLA   #?Subroutine5
    162            strcpy(display_line[DISPLAY3], CLEAR_DISPLAY);
   \                     ??CrossCallReturnLabel_5:
   \   00001C   ........     CALLA   #strcpy
    163            switch(line){
   \   000020   0A83         SUB.W   #0x0, R10
   \   000022   0724         JEQ     ??main_menu_display_1
   \   000024   1A83         SUB.W   #0x1, R10
   \   000026   0C24         JEQ     ??main_menu_display_2
   \   000028   1A83         SUB.W   #0x1, R10
   \   00002A   1124         JEQ     ??main_menu_display_3
   \   00002C   1A83         SUB.W   #0x1, R10
   \   00002E   0F24         JEQ     ??main_menu_display_3
   \   000030   143C         JMP     ??main_menu_display_0
    164            case 0x00:
    165              display_line[DISPLAY0][0] = '-';
   \                     ??main_menu_display_1:
   \   000032   F2402D00.... MOV.B   #0x2d, &display_line
    166              display_line[DISPLAY0][1] = '>';
   \   000038   F2403E00.... MOV.B   #0x3e, &display_line + 1
    167              break;
   \   00003E   0D3C         JMP     ??main_menu_display_0
    168            case 0x01:
    169              display_line[DISPLAY1][0] = '-';
   \                     ??main_menu_display_2:
   \   000040   F2402D00.... MOV.B   #0x2d, &display_line + 11
    170              display_line[DISPLAY1][1] = '>';
   \   000046   F2403E00.... MOV.B   #0x3e, &display_line + 12
    171              break;
   \   00004C   063C         JMP     ??main_menu_display_0
    172            case 0x03:
    173            case 0x02:
    174              display_line[DISPLAY2][0] = '-';
   \                     ??main_menu_display_3:
   \   00004E   F2402D00.... MOV.B   #0x2d, &display_line + 22
    175              display_line[DISPLAY2][1] = '>';
   \   000054   F2403E00.... MOV.B   #0x3e, &display_line + 23
    176              break;
    177            }
    178            display_changed=DISPLAYCHANGED;
   \                     ??main_menu_display_0:
   \   00005A   ....         JMP     ?Subroutine1
   \   00005C   0343         NOP
    179          }

   \                                 In  segment CODE, align 2
    180          void adc_menu_display(){
   \                     adc_menu_display:
    181            
    182            
    183          }
   \   000000   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  MSP 430 ">`:
   \   000000   20204D535020 DC8 "  MSP 430 "
   \            3433302000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Powered on">`:
   \   000000   506F77657265 DC8 "Powered on"
   \            64206F6E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Connecting">`:
   \   000000   436F6E6E6563 DC8 "Connecting"
   \            74696E6700  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "connected ">`:
   \   000000   636F6E6E6563 DC8 "connected "
   \            7465642000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "connecting">`:
   \   000000   636F6E6E6563 DC8 "connecting"
   \            74696E6700  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Waiting.  ">`:
   \   000000   57616974696E DC8 "Waiting.  "
   \            672E202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Waiting.. ">`:
   \   000000   57616974696E DC8 "Waiting.. "
   \            672E2E2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Waiting...">`:
   \   000000   57616974696E DC8 "Waiting..."
   \            672E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "DL=">`:
   \   000000   444C3D00     DC8 "DL="

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "DR=">`:
   \   000000   44523D00     DC8 "DR="

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "VT=">`:
   \   000000   56543D00     DC8 "VT="

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Settings">`:
   \   000000   202053657474 DC8 "  Settings"
   \            696E677300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ADC Vals">`:
   \   000000   202041444320 DC8 "  ADC Vals"
   \            56616C7300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  PID Tune">`:
   \   000000   202050494420 DC8 "  PID Tune"
   \            54756E6500  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      0   Connecting_Display
        0   -> Display_Process
        4   -> strcpy
      4   Connecting_machine
        4   -> Connecting_Display
        4   -> display_IP
      4   Display_Process
        4   -> Display_Update
      4   Init_Display
        0   -> Display_Process
        4   -> strcpy
        8   -> strcpy
      4   Init_Display_1
        0   -> Display_Process
        4   -> strcpy
      4   adc_menu_display
      6   change_display_adc
        6   -> strcat
        6   -> strcpy
      4   change_display_line
        4   -> strcpy
      4   clear_display
        0   -> clear_line
        4   -> clear_line
      4   clear_line
        4   -> strcpy
     16   display_IP
       16   -> Display_Process
       16   -> change_display_line
       16   -> strncpy
      6   main_menu_display
       10   -> strcpy
        6   -> strcpy
      4   serial_display
      4   waiting_animation
        0   -> change_display_line
        4   -> change_display_line


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  ADC Vals">
      11  ?<Constant "  MSP 430 ">
      11  ?<Constant "  PID Tune">
      11  ?<Constant "  Settings">
      11  ?<Constant "Connecting">
       4  ?<Constant "DL=">
       4  ?<Constant "DR=">
      11  ?<Constant "Powered on">
       4  ?<Constant "VT=">
      11  ?<Constant "Waiting.  ">
      11  ?<Constant "Waiting.. ">
      11  ?<Constant "Waiting...">
      11  ?<Constant "connected ">
      11  ?<Constant "connecting">
      16  ??Subroutine7_0
      18  ?Subroutine0
       8  ?Subroutine1
       6  ?Subroutine2
      16  ?Subroutine3
       8  ?Subroutine4
      18  ?Subroutine5
       8  ?Subroutine6
       0  Connecting_Display
      40  Connecting_machine
      34  Display_Process
      28  Init_Display
       4  Init_Display_1
       2  adc_menu_display
       1  ani_state
      84  change_display_adc
       6  change_display_line
      26  clear_display
      10  clear_line
       1  connect_state
      96  display_IP
      94  main_menu_display
       2  serial_display
      60  waiting_animation

 
 584 bytes in segment CODE
 144 bytes in segment DATA16_C
   2 bytes in segment DATA16_Z
 
 584 bytes of CODE  memory
 144 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
