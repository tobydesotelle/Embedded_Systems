###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          28/Nov/2022  20:12:32
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\main.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EW9291.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\main.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ol --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\main.c
      1          /*
      2            Description: This file contains the Main Routine - "While" Operating System
      3            
      4          
      5            Tobias Desotelle
      6            Team: Magic Smoke
      7            October 14 2022
      8            Built with IAR Embedded Workbench Version: (7.21.1)
      9          
     10            Project 10 v1.0
     11          */
     12          
     13          
     14          //Coding Check List
     15          //create adc readout menu
     16          //fix measurment function for edge cases
     17          //Build pid debuging display
     18          
     19          
     20          //Make pid_update updated from timer
     21          
     22          //Make serial lighter
     23          //faster ADC
     24          //
     25          
     26          
     27          #include "macros.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45c
   \   union <unnamed> _A_TB3CCR5_L
   \                     _A_TB3CCR5_L:
   \   000000                DS8 2
     28          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          volatile unsigned short motor_control_bits;
   \                     motor_control_bits:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          volatile unsigned char switch_control;
   \                     switch_control:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          volatile unsigned short timer_bits;
   \                     timer_bits:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          volatile unsigned short serial_bits;
   \                     serial_bits:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          volatile unsigned short display_bits;
   \                     display_bits:
   \   000000                DS8 2
     34          
     35          extern PIDController pid;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          int wheel_test = 0;
   \                     wheel_test:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
     37          void main(void){
   \                     main:
     38            PM5CTL0 &= ~LOCKLPM5;// Disable the GPIO power-on default high-impedance mode to activate
   \   000000   92C33001     BIC.W   #0x1, &0x130
     39            Master_Init();
   \   000004   ........     CALLA   #Master_Init
     40            PIDController_Init(&pid);
   \   000008   3C40....     MOV.W   #pid, R12
   \   00000C   ........     CALLA   #PIDController_Init
     41            BACKLIGHT = 0; // Backlight control for late night programming
   \   000010   82435C04     MOV.W   #0x0, &0x45c
     42            while(!((display_bits) & (Splash_bit))){}//Wait for 2 seconds to boot IOT 
   \                     ??main_0:
   \   000014   92B3....     BIT.W   #0x1, &display_bits
   \   000018   FD2B         JNC     ??main_0
     43            //IOT_main();//uncommet when IOT Works
     44            
     45            while(ALWAYS){
     46              menu_state_machine();
   \                     ??main_1:
   \   00001A   ........     CALLA   #menu_state_machine
     47              process_switches();
   \   00001E   ........     CALLA   #process_switches
     48              //Command_state();
     49              Display_Process();
   \   000022   ........     CALLA   #Display_Process
     50              //Command_state();
     51              P3OUT ^= TEST_PROBE;   	// Change State of TEST_PROBE OFF
   \   000026   D2E32202     XOR.B   #0x1, &0x222
     52              if(wheel_test != 0){
   \   00002A   8293....     CMP.W   #0x0, &wheel_test
   \   00002E   F527         JEQ     ??main_1
     53              	//Wheels_Process();         //State machine for line following 
     54            	move(FORWARD);
   \   000030   3C400300     MOV.W   #0x3, R12
   \   000034   ........     CALLA   #move
     55                pid_control();
   \   000038   ........     CALLA   #pid_control
   \   00003C   EE3F         JMP     ??main_1
   \   00003E   0343         NOP
   \   000040                REQUIRE _A_PM5CTL0_L
   \   000040                REQUIRE _A_TB3CCR5_L
   \   000040                REQUIRE _A_PBOUT_L
     56              }
     57            }
     58          }
     59            

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Master_Init
        4   -> PIDController_Init
        4   -> menu_state_machine
        4   -> move
        4   -> pid_control
        4   -> process_switches


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       2  _A_TB3CCR5_L
       2  display_bits
      64  main
       2  motor_control_bits
       2  serial_bits
       1  switch_control
       2  timer_bits
       2  wheel_test

 
 64 bytes in segment CODE
  6 bytes in segment DATA16_AN
 11 bytes in segment DATA16_Z
 
 64 bytes of CODE memory
 11 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
