###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          28/Nov/2022  20:12:32
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\ports.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EW9350.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\ports.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ol --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\ports.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\ports.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\ports.c
      1          /*
      2            Description: ports.c has all the intilizations of the ports and a function 
      3            that will run all of the port intilizations.  
      4          
      5            Tobias Desotelle
      6            Team: Magic Smoke
      7            October 14 2022
      8            Built with IAR Embedded Workbench Version: (7.21.1)
      9          */
     10          
     11          #include "macros.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x206
   \   union <unnamed> _A_PAREN_L
   \                     _A_PAREN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> _A_PASEL0_L
   \                     _A_PASEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20c
   \   union <unnamed> _A_PASEL1_L
   \                     _A_PASEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x218
   \   union <unnamed> _A_PAIES_L
   \                     _A_PAIES_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x224
   \   union <unnamed> _A_PBDIR_L
   \                     _A_PBDIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x226
   \   union <unnamed> _A_PBREN_L
   \                     _A_PBREN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x22a
   \   union <unnamed> _A_PBSEL0_L
   \                     _A_PBSEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x22c
   \   union <unnamed> _A_PBSEL1_L
   \                     _A_PBSEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x238
   \   union <unnamed> _A_PBIES_L
   \                     _A_PBIES_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x244
   \   union <unnamed> _A_PCDIR_L
   \                     _A_PCDIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x24a
   \   union <unnamed> _A_PCSEL0_L
   \                     _A_PCSEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x24c
   \   union <unnamed> _A_PCSEL1_L
   \                     _A_PCSEL1_L:
   \   000000                DS8 2
     12          

   \                                 In  segment CODE, align 2
     13          void Init_Ports(void){
   \                     Init_Ports:
     14            Init_Port1();
   \   000000   ........     CALLA   #Init_Port1
     15            Init_Port2();
   \   000004   ........     CALLA   #Init_Port2
     16            Init_Port3(USE_GPIO);
   \   000008   4C43         MOV.B   #0x0, R12
   \   00000A   ........     CALLA   #Init_Port3
     17            Init_Port4();
   \   00000E   ........     CALLA   #Init_Port4
     18            Init_Port5();
   \   000012   ........     CALLA   #Init_Port5
     19            Init_Port6();
   \   000016   ........     CALLA   #Init_Port6
     20          }
   \   00001A   1001         RETA

   \                                 In  segment CODE, align 2
     21          void Init_Port1(void){
   \                     Init_Port1:
     22          /*
     23          #define RED_LED                 (0x01) //P1.0
     24          #define A1_SEEED                (0x02) //P1.1
     25          #define V_DETECT_L              (0x04) //P1.2
     26          #define V_DETECT_R              (0x08) //P1.3
     27          #define A4_SEEED                (0x10) //P1.4
     28          #define V_THUMB                 (0x20) //P1.5
     29          #define UCA0RXD                 (0x40) //P1.6
     30          #define UCA0TXD                 (0x80) //P1.7
     31          */
     32          
     33          P1OUT = OUT1; // P1 set Low
   \   000000   C2430202     MOV.B   #0x0, &0x202
     34          P1DIR = DIR1; // Set P1 direction to output
   \   000004   D2430402     MOV.B   #0x1, &0x204
     35          P1SEL0 = SEL1_0;
   \   000008   F240FE000A02 MOV.B   #0xfe, &0x20a
     36          P1SEL1 = SEL1_1;
   \   00000E   F2403E000C02 MOV.B   #0x3e, &0x20c
     37          
     38          //P1SEL0 &= ~RED_LED;
     39          //P1SEL1 &= ~RED_LED;
     40          //P1OUT |= RED_LED;
     41          //P1DIR |= RED_LED;
     42          //
     43          //P1SEL0 |= A1_SEEED;
     44          //P1SEL1 |= A1_SEEED;
     45          //// P1OUT &= ~A1_SEEED;
     46          //// P1DIR &= ~A1_SEEED;
     47          //
     48          //P1SEL0 |= V_DETECT_L;
     49          //P1SEL1 |= V_DETECT_L;
     50          ////P1OUT &= ~V_DETECT_L;
     51          ////P1DIR &= ~V_DETECT_L;
     52          //
     53          //P1SEL0 |= V_DETECT_R;
     54          //P1SEL1 |= V_DETECT_R;
     55          ////P1OUT &= ~V_DETECT_R;
     56          ////P1DIR &= ~V_DETECT_R;
     57          //
     58          //P1SEL0 |= A4_SEEED;
     59          //P1SEL1 |= A4_SEEED;
     60          ////P1OUT &= ~A4_SEEED;
     61          ////P1DIR &= ~A4_SEEED;
     62          //
     63          //P1SEL0 |= V_THUMB;
     64          //P1SEL1 |= V_THUMB;
     65          ////P1OUT &= ~V_THUMB;
     66          ////P1DIR &= ~V_THUMB;
     67          //
     68          //P1SEL0 |= UCA0RXD;
     69          //P1SEL1 &= ~UCA0RXD;
     70          ////P1OUT &= ~UCA0RXD;
     71          ////P1DIR &= ~UCA0RXD;
     72          //
     73          //P1SEL0 |= UCA0TXD;
     74          //P1SEL1 &= ~UCA0TXD;
     75          ////P1OUT &= ~UCA0TXD;
     76          ////P1DIR &= ~UCA0TXD;
     77          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_PAOUT_L
   \   000016                REQUIRE _A_PADIR_L
   \   000016                REQUIRE _A_PASEL0_L
   \   000016                REQUIRE _A_PASEL1_L

   \                                 In  segment CODE, align 2
     78          void Init_Port2(void){ 
   \                     Init_Port2:
     79          //------------------------------------------------------------------------------
     80          //P2OUT = LOW; // P2 set Low
     81          //P2DIR = PORT_OUT; // Set P2 direction to output
     82          
     83          P2OUT = OUT2; 
   \   000000   F2403D000302 MOV.B   #0x3d, &0x203
     84          P2DIR = DIR2; 
   \   000006   F24037000502 MOV.B   #0x37, &0x205
     85          P2SEL0 = SEL2_0;
   \   00000C   C2430B02     MOV.B   #0x0, &0x20b
     86          P2SEL1 = SEL2_1;
   \   000010   F240C0000D02 MOV.B   #0xc0, &0x20d
     87          P2REN |= SW2; // Enable pullup resistor
   \   000016   F2D20702     BIS.B   #0x8, &0x207
     88          P2IES |= SW2; // P4.2 Hi/Lo edge interrupt
   \   00001A   F2D21902     BIS.B   #0x8, &0x219
     89          P2IFG &= ~SW2; // Clear all P2.6 interrupt flags
   \   00001E   F2C21D02     BIC.B   #0x8, &0x21d
     90          P2IE |= SW2; // P4.2 interrupt enabled
   \   000022   F2D21B02     BIS.B   #0x8, &0x21b
     91          
     92          //P2SEL0 &= ~RESET_LCD; // RESET_LCD GPIO operation
     93          //P2SEL1 &= ~RESET_LCD; // RESET_LCD GPIO operation
     94          //P2OUT &= ~RESET_LCD; // Initial Value = Low / Off
     95          //P2DIR |= RESET_LCD; // Direction = output
     96          //
     97          //P2SEL0 &= ~Check_Bat; // Check_Bat GPIO operation
     98          //P2SEL1 &= ~Check_Bat; // Check_Bat GPIO operation
     99          //P2OUT &= ~Check_Bat; // Initial Value = Low / Off
    100          //P2DIR |= Check_Bat; // Direction = output
    101          //
    102          //P2SEL0 &= ~IR_LED; // P2_2 GPIO operation
    103          //P2SEL1 &= ~IR_LED; // P2_2 GPIO operation
    104          //P2OUT &= ~IR_LED; // Initial Value = Low / Off
    105          //P2DIR |= IR_LED; // Direction = input
    106          //
    107          //P2SEL0 &= ~SW2; // SW2 Operation
    108          //P2SEL1 &= ~SW2; // SW2 Operation
    109          //P2OUT |= SW2; // Configure pullup resistor
    110          //P2DIR &= ~SW2; // Direction = input
    111          //P2REN |= SW2; // Enable pullup resistor
    112          //P2IES |= SW2; // P4.2 Hi/Lo edge interrupt
    113          //P2IFG &= ~SW2; // Clear all P2.6 interrupt flags
    114          //P2IE |= SW2; // P4.2 interrupt enabled
    115          
    116          //P2SEL0 &= ~IOT_RUN_CPU; // IOT_RUN_CPU GPIO operation
    117          //P2SEL1 &= ~IOT_RUN_CPU; // IOT_RUN_CPU GPIO operation
    118          //P2OUT |= IOT_RUN_CPU; // Initial Value = Low / Off
    119          //P2DIR |= IOT_RUN_CPU; // Direction = input
    120          //
    121          //P2SEL0 &= ~DAC_ENB; // DAC_ENB GPIO operation
    122          //P2SEL1 &= ~DAC_ENB; // DAC_ENB GPIO operation
    123          //P2OUT |= DAC_ENB; // Initial Value = High
    124          //P2DIR |= DAC_ENB; // Direction = output
    125          //
    126          //P2SEL0 &= ~LFXOUT; // LFXOUT Clock operation
    127          //P2SEL1 |= LFXOUT; // LFXOUT Clock operation
    128          //
    129          //P2SEL0 &= ~LFXIN; // LFXIN Clock operation
    130          //P2SEL1 |= LFXIN; // LFXIN Clock operation
    131          //------------------------------------------------------------------------------
    132          }
   \   000026   1001         RETA
   \   000028                REQUIRE _A_PAOUT_L
   \   000028                REQUIRE _A_PADIR_L
   \   000028                REQUIRE _A_PASEL0_L
   \   000028                REQUIRE _A_PASEL1_L
   \   000028                REQUIRE _A_PAREN_L
   \   000028                REQUIRE _A_PAIES_L
   \   000028                REQUIRE _A_PAIFG_L
   \   000028                REQUIRE _A_PAIE_L

   \                                 In  segment CODE, align 2
    133          void Init_Port3(char smclk){ 
   \                     Init_Port3:
    134            P3OUT = OUT3; 
   \   000000   D2432202     MOV.B   #0x1, &0x222
    135            P3DIR = DIR3; 
   \   000004   F240D1002402 MOV.B   #0xd1, &0x224
    136            P3SEL0 = SEL3_0;
   \   00000A   F2400E002A02 MOV.B   #0xe, &0x22a
    137            P3SEL1 = SEL3_1;
   \   000010   F2400E002C02 MOV.B   #0xe, &0x22c
    138          //  
    139          //  
    140          //  
    141          //  P3OUT = LOW; // P3 set Low
    142          //  P3DIR = PORT_OUT; // Set P3 direction to output
    143          //
    144          //  P3SEL0 &= ~TEST_PROBE; 
    145          //  P3SEL1 &= ~TEST_PROBE;
    146          //  P3OUT |= TEST_PROBE;
    147          //  P3DIR |= TEST_PROBE;
    148          //
    149          //  P3SEL0 |= OA2O;
    150          //  P3SEL1 |= OA2O;
    151          //  //P3OUT &= ~OA2O;
    152          //  //P3DIR &= ~OA2O;
    153          //
    154          //  P3SEL0 |= OA2N;
    155          //  P3SEL1 |= OA2N;
    156          //  //P3OUT &= ~OA2N;
    157          //  //P3DIR &= ~OA2N;
    158          //
    159          //  P3SEL0 |= OA2P;
    160          //  P3SEL1 |= OA2P;
    161          //  //P3OUT &= ~OA2P;
    162          //  //P3DIR &= ~OA2P;
    163          //  switch(smclk){
    164          //    case(USE_GPIO):
    165          //      P3SEL0 &= ~SMCLK;
    166          //      P3SEL1 &= ~SMCLK;
    167          //      P3OUT &= ~SMCLK;
    168          //      P3DIR |= SMCLK;
    169          //      break;
    170          //    case(USE_SMCLK):
    171          //      P3SEL0 |= SMCLK;
    172          //      P3SEL1 &= ~SMCLK;
    173          //      //P3OUT  &= ~SMCLK;
    174          //      P3DIR  |= SMCLK;
    175          //       break;
    176          //  default:
    177          //    break;
    178          //  }
    179          //
    180          //  P3SEL0 &= ~DAC_CNTL;
    181          //  P3SEL1 &= ~DAC_CNTL;
    182          //  P3OUT &= ~DAC_CNTL;
    183          //  P3DIR &= ~DAC_CNTL;
    184          //
    185          //  P3SEL0 &= ~IOT_LINK_CPU;
    186          //  P3SEL1 &= ~IOT_LINK_CPU;
    187          //  P3OUT &= ~IOT_LINK_CPU;
    188          //  P3DIR |= IOT_LINK_CPU;
    189          //
    190            P3SEL0 &= ~IOT_EN_CPU;
   \   000016   F2C080002A02 BIC.B   #0x80, &0x22a
    191            P3SEL1 &= ~IOT_EN_CPU;
   \   00001C   F2C080002C02 BIC.B   #0x80, &0x22c
    192            P3OUT &= ~IOT_EN_CPU;
   \   000022   F2C080002202 BIC.B   #0x80, &0x222
    193            P3DIR |= IOT_EN_CPU;
   \   000028   F2D080002402 BIS.B   #0x80, &0x224
    194          }
   \   00002E   1001         RETA
   \   000030                REQUIRE _A_PBOUT_L
   \   000030                REQUIRE _A_PBDIR_L
   \   000030                REQUIRE _A_PBSEL0_L
   \   000030                REQUIRE _A_PBSEL1_L

   \                                 In  segment CODE, align 2
    195          void Init_Port4(void){ 
   \                     Init_Port4:
    196          //------------------------------------------------------------------------------
    197          
    198            P4OUT = OUT4; 
   \   000000   F24013002302 MOV.B   #0x13, &0x223
    199            P4DIR = DIR4; 
   \   000006   F24011002502 MOV.B   #0x11, &0x225
    200            P4SEL0 = SEL4_0;
   \   00000C   F240EC002B02 MOV.B   #0xec, &0x22b
    201            P4SEL1 = SEL4_1;
   \   000012   C2432D02     MOV.B   #0x0, &0x22d
    202            P4REN |= SW1; // Enable pullup resistor
   \   000016   E2D32702     BIS.B   #0x2, &0x227
    203            P4IES |= SW1; // P4.2 Hi/Lo edge interrupt
   \   00001A   E2D33902     BIS.B   #0x2, &0x239
    204          P4IFG &= ~SW1; // Clear all P2.6 interrupt flags
   \   00001E   E2C33D02     BIC.B   #0x2, &0x23d
    205          P4IE |= SW1; // P4.2 interrupt enabled
   \   000022   E2D33B02     BIS.B   #0x2, &0x23b
    206          //  P4OUT = LOW; // P4 set Low
    207          //P4DIR = PORT_OUT; // Set P4 direction to output
    208          //
    209          //P4SEL0 &= ~DAC_CNTL1; // DAC_CNTL1 GPIO operation
    210          //P4SEL1 &= ~DAC_CNTL1; // DAC_CNTL1 GPIO operation
    211          //P4OUT |= DAC_CNTL1; // Set DAC_CNTL1 Off [High]
    212          //P4DIR |= DAC_CNTL1; // Set DAC_CNTL1 direction to output
    213          //
    214          //P4SEL0 &= ~SW1; // SW1 GPIO operation
    215          //P4SEL1 &= ~SW1; // SW1 GPIO operation
    216          //P4OUT |= SW1; // Configure pullup resistor
    217          //P4DIR &= ~SW1; // Direction = input
    218          //P4REN |= SW1; // Enable pullup resistor
    219          //P4IES |= SW1; // P4.2 Hi/Lo edge interrupt
    220          //P4IFG &= ~SW1; // Clear all P2.6 interrupt flags
    221          //P4IE |= SW1; // P4.2 interrupt enabled
    222          //
    223          //P4SEL0 |= UCA1TXD; // USCI_A1 UART operation
    224          //P4SEL1 &= ~UCA1TXD; // USCI_A1 UART operation
    225          //
    226          //P4SEL0 |= UCA1RXD; // USCI_A1 UART operation
    227          //P4SEL1 &= ~UCA1RXD; // USCI_A1 UART operation
    228          //
    229          //P4SEL0 &= ~UCB1_CS_LCD; // UCB1_CS_LCD GPIO operation
    230          //P4SEL1 &= ~UCB1_CS_LCD; // UCB1_CS_LCD GPIO operation
    231          //P4OUT |= UCB1_CS_LCD; // Set SPI_CS_LCD Off [High]
    232          //P4DIR |= UCB1_CS_LCD; // Set SPI_CS_LCD direction to output
    233          //
    234          //P4SEL0 |= UCB1CLK; // UCB1CLK SPI BUS operation
    235          //P4SEL1 &= ~UCB1CLK; // UCB1CLK SPI BUS operation
    236          //
    237          //P4SEL0 |= UCB1SIMO; // UCB1SIMO SPI BUS operation
    238          //P4SEL1 &= ~UCB1SIMO; // UCB1SIMO SPI BUS operation
    239          //
    240          //P4SEL0 |= UCB1SOMI; // UCB1SOMI SPI BUS operation
    241          //P4SEL1 &= ~UCB1SOMI; // UCB1SOMI SPI BUS operation
    242          //------------------------------------------------------------------------------
    243          }
   \   000026   1001         RETA
   \   000028                REQUIRE _A_PBOUT_L
   \   000028                REQUIRE _A_PBDIR_L
   \   000028                REQUIRE _A_PBSEL0_L
   \   000028                REQUIRE _A_PBSEL1_L
   \   000028                REQUIRE _A_PBREN_L
   \   000028                REQUIRE _A_PBIES_L
   \   000028                REQUIRE _A_PBIFG_L
   \   000028                REQUIRE _A_PBIE_L

   \                                 In  segment CODE, align 2
    244          void Init_Port5(void){ 
   \                     Init_Port5:
    245          
    246            P5OUT = OUT5; 
   \   000000   C2434202     MOV.B   #0x0, &0x242
    247            P5DIR = DIR5; 
   \   000004   C2434402     MOV.B   #0x0, &0x244
    248            P5SEL0 = SEL5_0;
   \   000008   C2434A02     MOV.B   #0x0, &0x24a
    249            P5SEL1 = SEL5_1;
   \   00000C   C2434C02     MOV.B   #0x0, &0x24c
    250          //  
    251          //  P5OUT = LOW; // P5 set Low
    252          //P5DIR = PORT_OUT; // Set P5 direction to output 
    253          //
    254          //P5SEL0 &= ~CHECK_BAT;
    255          //P5SEL1 &= ~CHECK_BAT;
    256          //P5OUT &= ~CHECK_BAT;
    257          //P5DIR &= ~CHECK_BAT;
    258          //
    259          //P5SEL0 &= ~V_BAT;
    260          //P5SEL1 &= ~V_BAT;
    261          //P5OUT &= ~V_BAT;
    262          //P5DIR &= ~V_BAT;
    263          //
    264          //P5SEL0 &= ~V_DAC;
    265          //P5SEL1 &= ~V_DAC;
    266          //P5OUT &= ~V_DAC;
    267          //P5DIR &= ~V_DAC;
    268          //
    269          //P5SEL0 &= ~V_3_3;
    270          //P5SEL1 &= ~V_3_3;
    271          //P5OUT &= ~V_3_3;
    272          //P5DIR &= ~V_3_3;
    273          //
    274          P5SEL0 &= ~IOT_BOOT_CPU;
   \   000010   F2C010004A02 BIC.B   #0x10, &0x24a
    275          P5SEL1 &= ~IOT_BOOT_CPU;
   \   000016   F2C010004C02 BIC.B   #0x10, &0x24c
    276          P5OUT &= ~IOT_BOOT_CPU;
   \   00001C   F2C010004202 BIC.B   #0x10, &0x242
    277          P5DIR &= ~IOT_BOOT_CPU;
   \   000022   F2C010004402 BIC.B   #0x10, &0x244
    278          }
   \   000028   1001         RETA
   \   00002A                REQUIRE _A_PCOUT_L
   \   00002A                REQUIRE _A_PCDIR_L
   \   00002A                REQUIRE _A_PCSEL0_L
   \   00002A                REQUIRE _A_PCSEL1_L

   \                                 In  segment CODE, align 2
    279          void Init_Port6(void){ 
   \                     Init_Port6:
    280            
    281            P6OUT = OUT6; 
   \   000000   C2434302     MOV.B   #0x0, &0x243
    282            P6DIR = DIR6; 
   \   000004   F2407F004502 MOV.B   #0x7f, &0x245
    283            P6SEL0 = SEL6_0;
   \   00000A   F2403F004B02 MOV.B   #0x3f, &0x24b
    284            P6SEL1 = SEL6_1;
   \   000010   C2434D02     MOV.B   #0x0, &0x24d
    285            
    286          //P6OUT = LOW; // P6 set Low
    287          //P6DIR = PORT_OUT; // Set P6 direction to output  
    288          //
    289          //P6SEL0 |= R_FORWARD;
    290          //P6SEL1 &= ~R_FORWARD;
    291          //P6OUT &= ~R_FORWARD;
    292          //P6DIR |= R_FORWARD;
    293          //
    294          //P6SEL0 |= R_REVERSE;
    295          //P6SEL1 &= ~R_REVERSE;
    296          //P6OUT &= ~R_REVERSE;
    297          //P6DIR |= R_REVERSE;
    298          //
    299          //P6SEL0 |= L_FORWARD;
    300          //P6SEL1 &= ~L_FORWARD;
    301          //P6OUT &= ~L_FORWARD;
    302          //P6DIR |= L_FORWARD;
    303          //
    304          //P6SEL0 |= L_REVERSE;
    305          //P6SEL1 &= ~L_REVERSE;
    306          //P6OUT &= ~L_REVERSE;
    307          //P6DIR |= L_REVERSE;
    308          //
    309          //P6SEL0 |= LCD_BACKLIGHT;
    310          //P6SEL1 &= ~LCD_BACKLIGHT;
    311          //P6OUT &= ~LCD_BACKLIGHT;
    312          //P6DIR |= LCD_BACKLIGHT;
    313          //
    314          //P6SEL0 |= P6_5;
    315          //P6SEL1 &= ~P6_5;
    316          //P6OUT &= ~P6_5;
    317          //P6DIR |= P6_5;
    318          //
    319          //P6SEL0 &= ~GRN_LED;
    320          //P6SEL1 &= ~GRN_LED;
    321          //P6OUT &= ~GRN_LED;
    322          //P6DIR |= GRN_LED;
    323          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_PCOUT_L
   \   000016                REQUIRE _A_PCDIR_L
   \   000016                REQUIRE _A_PCSEL0_L
   \   000016                REQUIRE _A_PCSEL1_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Port1
      4   Init_Port2
      4   Init_Port3
      4   Init_Port4
      4   Init_Port5
      4   Init_Port6
      4   Init_Ports
        4   -> Init_Port1
        4   -> Init_Port2
        4   -> Init_Port3
        4   -> Init_Port4
        4   -> Init_Port5
        4   -> Init_Port6


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      22  Init_Port1
      40  Init_Port2
      48  Init_Port3
      40  Init_Port4
      42  Init_Port5
      22  Init_Port6
      28  Init_Ports
       2  _A_PADIR_L
       2  _A_PAIES_L
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PAOUT_L
       2  _A_PAREN_L
       2  _A_PASEL0_L
       2  _A_PASEL1_L
       2  _A_PBDIR_L
       2  _A_PBIES_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PBOUT_L
       2  _A_PBREN_L
       2  _A_PBSEL0_L
       2  _A_PBSEL1_L
       2  _A_PCDIR_L
       2  _A_PCOUT_L
       2  _A_PCSEL0_L
       2  _A_PCSEL1_L

 
 242 bytes in segment CODE
  40 bytes in segment DATA16_AN
 
 242 bytes of CODE memory
   0 bytes of DATA memory (+ 40 bytes shared)

Errors: none
Warnings: none
