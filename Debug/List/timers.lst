###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          13/Nov/2022  21:04:09
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\timers.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EWBAA0.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\timers.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\timers.c
      1          /*
      2            Description: This file contains the all of the intilzation functions.
      3           
      4          
      5            Tobias Desotelle
      6            Team: Magic Smoke
      7            October 14 2022
      8            Built with IAR Embedded Workbench Version: (7.21.1)
      9          */
     10          #include "macros.h"

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c0
   \   union <unnamed> _A_TB1CTL_L
   \                     _A_TB1CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c2
   \   union <unnamed> _A_TB1CCTL0_L
   \                     _A_TB1CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d2
   \   union <unnamed> _A_TB1CCR0_L
   \                     _A_TB1CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d6
   \   union <unnamed> _A_TB1CCR2_L
   \                     _A_TB1CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3e0
   \   union <unnamed> _A_TB1EX0_L
   \                     _A_TB1EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x400
   \   union <unnamed> _A_TB2CTL_L
   \                     _A_TB2CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x406
   \   union <unnamed> _A_TB2CCTL2_L
   \                     _A_TB2CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x412
   \   union <unnamed> _A_TB2CCR0_L
   \                     _A_TB2CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x414
   \   union <unnamed> _A_TB2CCR1_L
   \                     _A_TB2CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x416
   \   union <unnamed> _A_TB2CCR2_L
   \                     _A_TB2CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x420
   \   union <unnamed> _A_TB2EX0_L
   \                     _A_TB2EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   union <unnamed> _A_TB3CTL_L
   \                     _A_TB3CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x442
   \   union <unnamed> _A_TB3CCTL0_L
   \                     _A_TB3CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   union <unnamed> _A_TB3CCTL1_L
   \                     _A_TB3CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   union <unnamed> _A_TB3CCTL2_L
   \                     _A_TB3CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x448
   \   union <unnamed> _A_TB3CCTL3_L
   \                     _A_TB3CCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44a
   \   union <unnamed> _A_TB3CCTL4_L
   \                     _A_TB3CCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44c
   \   union <unnamed> _A_TB3CCTL5_L
   \                     _A_TB3CCTL5_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   union <unnamed> _A_TB3CCR0_L
   \                     _A_TB3CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
     11          void Init_Timers(void){
   \                     Init_Timers:
     12            Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
     13            Init_Timer_B1();
   \   000004   ........     CALLA   #Init_Timer_B1
     14            Init_Timer_B2();
   \   000008   ........     CALLA   #Init_Timer_B2
     15            Init_Timer_B3();
   \   00000C   ........     CALLA   #Init_Timer_B3
     16          }
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2
     17          void Init_Timer_B0(void){
   \                     Init_Timer_B0:
     18            TB0CTL = TBSSEL__SMCLK;       // SMCLK source
   \   000000   B24000028003 MOV.W   #0x200, &0x380
     19            TB0CTL |= TBCLR;              // Resets TB0R, clock divider, count direction
   \   000006   A2D28003     BIS.W   #0x4, &0x380
     20            TB0CTL |= MC__CONTINOUS;      // Continuous up
   \   00000A   B2D020008003 BIS.W   #0x20, &0x380
     21            TB0CTL |= ID__8;              // Divide clock by 8
   \   000010   B2D0C0008003 BIS.W   #0xc0, &0x380
     22            TB0EX0 = TBIDEX__8;           // Divide clock by an additional 8
   \   000016   B2400700A003 MOV.W   #0x7, &0x3a0
     23            
     24            TB0CCR0 = TB0CCR0_INTERVAL;   // CCR0
   \   00001C   B2406A189203 MOV.W   #0x186a, &0x392
     25            TB0CCTL0 &= ~CCIFG;           // CCR0 clear flag
   \   000022   92C38203     BIC.W   #0x1, &0x382
     26            TB0CCTL0 |= CCIE;             // CCR0 enable interrupt
   \   000026   B2D010008203 BIS.W   #0x10, &0x382
     27            
     28            //TB0CCR1 = TB0CCR1_INTERVAL;   // CCR1 
     29            //TB0CCTL1 &= ~CCIFG;         // CCR0 enable interrupt
     30            //TB0CCTL1 |= CCIE;           // CCR1 enable interrupt
     31            
     32            TB0CCR2 = TB0CCR2_INTERVAL; // CCR2 
   \   00002C   B240A8619603 MOV.W   #0x61a8, &0x396
     33            TB0CCTL2 &= ~CCIFG;         // CCR0 clear flag
   \   000032   92C38603     BIC.W   #0x1, &0x386
     34            TB0CCTL2 |= CCIE;           // CCR2 enable interrupt
   \   000036   B2D010008603 BIS.W   #0x10, &0x386
     35            
     36            TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   00003C   A2C38003     BIC.W   #0x2, &0x380
     37            TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000040   92C38003     BIC.W   #0x1, &0x380
     38          }
   \   000044   1001         RETA
   \   000046                REQUIRE _A_TB0CTL_L
   \   000046                REQUIRE _A_TB0EX0_L
   \   000046                REQUIRE _A_TB0CCR0_L
   \   000046                REQUIRE _A_TB0CCTL0_L
   \   000046                REQUIRE _A_TB0CCR2_L
   \   000046                REQUIRE _A_TB0CCTL2_L

   \                                 In  segment CODE, align 2
     39          void Init_Timer_B1(void){
   \                     Init_Timer_B1:
     40            TB1CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B2400002C003 MOV.W   #0x200, &0x3c0
     41            TB1CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D2C003     BIS.W   #0x4, &0x3c0
     42            TB1CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D02000C003 BIS.W   #0x20, &0x3c0
     43            TB1CTL |= ID__8; // Divide clock by 8
   \   000010   B2D0C000C003 BIS.W   #0xc0, &0x3c0
     44            TB1EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700E003 MOV.W   #0x7, &0x3e0
     45            
     46            TB1CCR0 = TB1CCR0_INTERVAL; // CCR0
   \   00001C   B240A861D203 MOV.W   #0x61a8, &0x3d2
     47            TB1CCTL0 &= ~CCIFG; // CCR0 enable interrupt
   \   000022   92C3C203     BIC.W   #0x1, &0x3c2
     48            TB1CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000026   B2D01000C203 BIS.W   #0x10, &0x3c2
     49            
     50            //TB1CCR1 = TB0CCR1_INTERVAL; // CCR1 
     51            
     52            
     53            //TB0CCTL1 &= ~CCIFG; // CCR0 enable interrupt
     54            // TB0CCTL1 |= CCIE; // CCR1 enable interrupt
     55            
     56            TB1CCR2 = TB0CCR2_INTERVAL; // CCR2 
   \   00002C   B240A861D603 MOV.W   #0x61a8, &0x3d6
     57            TB1CCTL2 |= CCIE; // CCR2 enable interrupt
   \   000032   B2D01000C603 BIS.W   #0x10, &0x3c6
     58            
     59            TB1CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000038   A2C3C003     BIC.W   #0x2, &0x3c0
     60            TB1CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   00003C   92C3C003     BIC.W   #0x1, &0x3c0
     61          }
   \   000040   1001         RETA
   \   000042                REQUIRE _A_TB1CTL_L
   \   000042                REQUIRE _A_TB1EX0_L
   \   000042                REQUIRE _A_TB1CCR0_L
   \   000042                REQUIRE _A_TB1CCTL0_L
   \   000042                REQUIRE _A_TB1CCR2_L
   \   000042                REQUIRE _A_TB1CCTL2_L

   \                                 In  segment CODE, align 2
     62          void Init_Timer_B2(void){
   \                     Init_Timer_B2:
     63            TB2CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B24000020004 MOV.W   #0x200, &0x400
     64            TB2CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D20004     BIS.W   #0x4, &0x400
     65            TB2CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020000004 BIS.W   #0x20, &0x400
     66            TB2CTL |= ID__8; // Divide clock by 8
   \   000010   B2D0C0000004 BIS.W   #0xc0, &0x400
     67            TB2EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B24007002004 MOV.W   #0x7, &0x420
     68            
     69            TB2CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00001C   B2406A181204 MOV.W   #0x186a, &0x412
     70            //TB0CCTL0 &= ~CCIFG; // CCR0 enable interrupt
     71            //TB0CCTL0 |= CCIE; // CCR0 enable interrupt
     72            
     73            TB2CCR1 = TB0CCR1_INTERVAL; // CCR1 
   \   000022   B2406A181404 MOV.W   #0x186a, &0x414
     74            //------------------------------------
     75            
     76            //TB0CCTL1 &= ~CCIFG; // CCR0 enable interrupt
     77            // TB0CCTL1 |= CCIE; // CCR1 enable interrupt
     78            
     79            TB2CCR2 = TB0CCR2_INTERVAL; // CCR2 
   \   000028   B240A8611604 MOV.W   #0x61a8, &0x416
     80            TB2CCTL2 |= CCIE; // CCR2 enable interrupt
   \   00002E   B2D010000604 BIS.W   #0x10, &0x406
     81            
     82            TB2CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000034   A2C30004     BIC.W   #0x2, &0x400
     83            TB2CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000038   92C30004     BIC.W   #0x1, &0x400
     84          }
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_TB2CTL_L
   \   00003E                REQUIRE _A_TB2EX0_L
   \   00003E                REQUIRE _A_TB2CCR0_L
   \   00003E                REQUIRE _A_TB2CCR1_L
   \   00003E                REQUIRE _A_TB2CCR2_L
   \   00003E                REQUIRE _A_TB2CCTL2_L

   \                                 In  segment CODE, align 2
     85          void Init_Timer_B3(void) {
   \                     Init_Timer_B3:
     86            /*
     87            Timer B3 will control the pwm signals using 1MHz CLK
     88            */
     89            TB3CTL = TBSSEL__SMCLK; // SMCLK 
   \   000000   B24000024004 MOV.W   #0x200, &0x440
     90            TB3CTL |= TBCLR;        // Resets TB3R, clock divider, count direction
   \   000006   A2D24004     BIS.W   #0x4, &0x440
     91            //TB3CTL |= ID__8;
     92            TB3CTL |= MC__UP;       // Up Mode
   \   00000A   B2D010004004 BIS.W   #0x10, &0x440
     93            
     94            
     95            TB3CCR0 = WHEEL_PERIOD;   // PWM Period
   \   000010   B24024F45204 MOV.W   #0xf424, &0x452
     96            TB3CCTL0 |= CCIE;         // Enable interrupt
   \   000016   B2D010004204 BIS.W   #0x10, &0x442
     97            
     98            TB3CCTL1 = OUTMOD_7;             // CCR1 reset/set
   \   00001C   B240E0004404 MOV.W   #0xe0, &0x444
     99            TB3CCTL1 |= CCIE;         // Enable interrupt
   \   000022   B2D010004404 BIS.W   #0x10, &0x444
    100            RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward off
   \   000028   82435604     MOV.W   #0x0, &0x456
    101            
    102            TB3CCTL2 = OUTMOD_7;             // CCR2 reset/set
   \   00002C   B240E0004604 MOV.W   #0xe0, &0x446
    103            LEFT_FORWARD_SPEED = WHEEL_OFF;  // P6.1 Left Forward off
   \   000032   82435A04     MOV.W   #0x0, &0x45a
    104            
    105            TB3CCTL3 = OUTMOD_7;             // CCR3 reset/set
   \   000036   B240E0004804 MOV.W   #0xe0, &0x448
    106            RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse off
   \   00003C   82435404     MOV.W   #0x0, &0x454
    107            
    108            TB3CCTL4 = OUTMOD_7;             // CCR4 reset/set
   \   000040   B240E0004A04 MOV.W   #0xe0, &0x44a
    109            LEFT_REVERSE_SPEED = WHEEL_OFF;  // P6.3 Left Reverse off
   \   000046   82435804     MOV.W   #0x0, &0x458
    110            
    111            TB3CCTL5 = OUTMOD_7;             // CCR4 reset/set
   \   00004A   B240E0004C04 MOV.W   #0xe0, &0x44c
    112            
    113          }
   \   000050   1001         RETA
   \   000052                REQUIRE _A_TB3CTL_L
   \   000052                REQUIRE _A_TB3CCR0_L
   \   000052                REQUIRE _A_TB3CCTL0_L
   \   000052                REQUIRE _A_TB3CCTL1_L
   \   000052                REQUIRE _A_TB3CCR2_L
   \   000052                REQUIRE _A_TB3CCTL2_L
   \   000052                REQUIRE _A_TB3CCR4_L
   \   000052                REQUIRE _A_TB3CCTL3_L
   \   000052                REQUIRE _A_TB3CCR1_L
   \   000052                REQUIRE _A_TB3CCTL4_L
   \   000052                REQUIRE _A_TB3CCR3_L
   \   000052                REQUIRE _A_TB3CCTL5_L
    114          
    115          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timer_B1
      4   Init_Timer_B2
      4   Init_Timer_B3
      4   Init_Timers
        4   -> Init_Timer_B0
        4   -> Init_Timer_B1
        4   -> Init_Timer_B2
        4   -> Init_Timer_B3


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      70  Init_Timer_B0
      66  Init_Timer_B1
      62  Init_Timer_B2
      82  Init_Timer_B3
      18  Init_Timers
       2  _A_TB0CCR0_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL2_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L
       2  _A_TB1CCR0_L
       2  _A_TB1CCR2_L
       2  _A_TB1CCTL0_L
       2  _A_TB1CCTL2_L
       2  _A_TB1CTL_L
       2  _A_TB1EX0_L
       2  _A_TB2CCR0_L
       2  _A_TB2CCR1_L
       2  _A_TB2CCR2_L
       2  _A_TB2CCTL2_L
       2  _A_TB2CTL_L
       2  _A_TB2EX0_L
       2  _A_TB3CCR0_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
       2  _A_TB3CCTL0_L
       2  _A_TB3CCTL1_L
       2  _A_TB3CCTL2_L
       2  _A_TB3CCTL3_L
       2  _A_TB3CCTL4_L
       2  _A_TB3CCTL5_L
       2  _A_TB3CTL_L

 
 298 bytes in segment CODE
  60 bytes in segment DATA16_AN
 
 298 bytes of CODE memory
   0 bytes of DATA memory (+ 60 bytes shared)

Errors: none
Warnings: none
