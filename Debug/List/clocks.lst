###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          14/Nov/2022  10:25:37
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\clocks.c
#    Command line  =  
#        -f C:\Users\TOBIAS~1\AppData\Local\Temp\EWE33.tmp ("C:\Users\Tobias
#        Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\clocks.c" -lC
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List" -o
#        "C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ohs --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\List\clocks.lst
#    Object file   =  
#        C:\Users\Tobias Desotelle\OneDrive - UNC
#        Asheville\Documents\GitHub\Embedded_Systems\Debug\Obj\clocks.r43
#
###############################################################################

C:\Users\Tobias Desotelle\OneDrive - UNC Asheville\Documents\GitHub\Embedded_Systems\clocks.c
      1          // ------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Clock Initialization
      4          //
      5          //  Jim Carlson
      6          //  Jan 2021
      7          //  Built with IAR Embedded Workbench Version: V7.12.1
      8          // ------------------------------------------------------------------------------
      9          #include  "functions.h"
     10          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x180
   \   union <unnamed> _A_CSCTL0_L
   \                     _A_CSCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x182
   \   union <unnamed> _A_CSCTL1_L
   \                     _A_CSCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x184
   \   union <unnamed> _A_CSCTL2_L
   \                     _A_CSCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x186
   \   union <unnamed> _A_CSCTL3_L
   \                     _A_CSCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x188
   \   union <unnamed> _A_CSCTL4_L
   \                     _A_CSCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x18a
   \   union <unnamed> _A_CSCTL5_L
   \                     _A_CSCTL5_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x18e
   \   union <unnamed> _A_CSCTL7_L
   \                     _A_CSCTL7_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x102
   \   union <unnamed> _A_SFRIFG1_L
   \                     _A_SFRIFG1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x1cc
   \   union <unnamed> _A_WDTCTL_L
   \                     _A_WDTCTL_L:
   \   000000                DS8 2
     11          
     12          // MACROS========================================================================
     13          #define MCLK_FREQ_MHZ           (8) // MCLK = 8MHz
     14          #define CLEAR_REGISTER     (0X0000)
     15          
     16          void Init_Clocks(void);
     17          void Software_Trim(void);
     18          

   \                                 In  segment CODE, align 2
     19          void Init_Clocks(void){
   \                     Init_Clocks:
     20          // -----------------------------------------------------------------------------
     21          // Clock Configurtaions
     22          // This is the clock initialization for the program.
     23          // Initial clock configuration, runs immediately after port configuration.
     24          // Disables 1ms watchdog timer,
     25          // Configure MCLK for 8MHz and XT1 sourcing ACLK and FLLREF.
     26          //
     27          // Description: Configure ACLK = 32768Hz,
     28          //                        MCLK = DCO + XT1CLK REF = 8MHz,
     29          //                        SMCLK = MCLK/2 = 4MHz.
     30          // Toggle LED to indicate that the program is running.
     31          //
     32          // -----------------------------------------------------------------------------
     33            WDTCTL = WDTPW | WDTHOLD;  // Disable watchdog
   \   000000   B240805ACC01 MOV.W   #0x5a80, &0x1cc
     34          
     35            do{
     36              CSCTL7 &= ~XT1OFFG;      // Clear XT1 fault flag
   \                     ??Init_Clocks_0:
   \   000006   A2C38E01     BIC.W   #0x2, &0x18e
     37              CSCTL7 &= ~DCOFFG;       // Clear DCO fault flag
   \   00000A   92C38E01     BIC.W   #0x1, &0x18e
     38              SFRIFG1 &= ~OFIFG;
   \   00000E   A2C30201     BIC.W   #0x2, &0x102
     39            } while (SFRIFG1 & OFIFG); // Test oscillator fault flag
   \   000012   A2B30201     BIT.W   #0x2, &0x102
   \   000016   F723         JNE     ??Init_Clocks_0
     40            __bis_SR_register(SCG0);   // disable FLL
   \   000018   32D04000     BIS.W   #0x40, SR
     41          
     42            CSCTL1 = DCOFTRIMEN_1;
   \   00001C   B24080008201 MOV.W   #0x80, &0x182
     43            CSCTL1 |= DCOFTRIM0;
   \   000022   B2D010008201 BIS.W   #0x10, &0x182
     44            CSCTL1 |= DCOFTRIM1;       // DCOFTRIM=3
   \   000028   B2D020008201 BIS.W   #0x20, &0x182
     45            CSCTL1 |= DCORSEL_3;       // DCO Range = 8MHz
   \   00002E   B2D006008201 BIS.W   #0x6, &0x182
     46          
     47            CSCTL2 = FLLD_0 + 243;     // DCODIV = 8MHz
   \   000034   B240F3008401 MOV.W   #0xf3, &0x184
     48          
     49            CSCTL3 |= SELREF__XT1CLK;  // Set XT1CLK as FLL reference source
   \   00003A   924286018601 MOV.W   &0x186, &0x186
     50            __delay_cycles(3);
   \   000040                ////////////// Start of 3 cycles delay.
   \   000040   5F0A         RLAM.W  #0x3, R15
   \   000042                ////////////// End of delay code.
     51            __bic_SR_register(SCG0);   // enable FLL
   \   000042   32C04000     BIC.W   #0x40, SR
     52            Software_Trim();           // Software Trim to get the best DCOFTRIM value
   \   000046   ........     CALLA   #Software_Trim
     53          
     54            CSCTL4 = SELA__XT1CLK;     // Set ACLK = XT1CLK = 32768Hz
   \   00004A   82438801     MOV.W   #0x0, &0x188
     55            CSCTL4 |= SELMS__DCOCLKDIV;// DCOCLK = MCLK and SMCLK source
   \   00004E   924288018801 MOV.W   &0x188, &0x188
     56          
     57          //  CSCTL5 |= DIVM__4;         // MCLK = DCOCLK / 4  = 2MHZ,
     58          //  CSCTL5 |= DIVS__4;         // SMCLK = MCLK / 4 = 500KHz
     59            CSCTL5 |= DIVM__1;        // MCLK = DCOCLK = 8MHZ,
   \   000054   92428A018A01 MOV.W   &0x18a, &0x18a
     60            CSCTL5 |= DIVS__1;        // SMCLK = MCLK = 8MHz
   \   00005A   92428A018A01 MOV.W   &0x18a, &0x18a
     61          
     62            PM5CTL0 &= ~LOCKLPM5;      // Disable the GPIO power-on default high-impedance mode
   \   000060   92C33001     BIC.W   #0x1, &0x130
     63                                       // to activate previously configured port settings
     64          }
   \   000064   1001         RETA
   \   000066                REQUIRE _A_WDTCTL_L
   \   000066                REQUIRE _A_CSCTL7_L
   \   000066                REQUIRE _A_SFRIFG1_L
   \   000066                REQUIRE _A_CSCTL1_L
   \   000066                REQUIRE _A_CSCTL2_L
   \   000066                REQUIRE _A_CSCTL3_L
   \   000066                REQUIRE _A_CSCTL4_L
   \   000066                REQUIRE _A_CSCTL5_L
   \   000066                REQUIRE _A_PM5CTL0_L
     65          

   \                                 In  segment CODE, align 2
     66          void Software_Trim(void){
   \                     Software_Trim:
   \   000000   7B15         PUSHM.W #0x8, R11
     67          // --COPYRIGHT--,BSD_EX
     68          // Copyright (c) 2014, Texas Instruments Incorporated
     69          // All rights reserved.
     70            unsigned int oldDcoTap = 0xffff;
     71            unsigned int newDcoTap = 0xffff;
   \   000002   3C43         MOV.W   #0xffff, R12
     72            unsigned int newDcoDelta = 0xffff;
     73            unsigned int bestDcoDelta = 0xffff;
   \   000004   3A43         MOV.W   #0xffff, R10
     74            unsigned int csCtl0Copy = 0;
   \   000006   0B43         MOV.W   #0x0, R11
     75            unsigned int csCtl1Copy = 0;
   \   000008   0843         MOV.W   #0x0, R8
     76            unsigned int csCtl0Read = 0;
     77            unsigned int csCtl1Read = 0;
     78            unsigned int dcoFreqTrim = 3;
     79            unsigned char endLoop = 0;
   \   00000A   4943         MOV.B   #0x0, R9
   \   00000C   36400001     MOV.W   #0x100, R6
     80            do{
     81              CSCTL0 = 0x100;                         // DCO Tap = 256
   \                     ??Software_Trim_2:
   \   000010   82468001     MOV.W   R6, &0x180
     82              do{
     83                CSCTL7 &= ~DCOFFG;                    // Clear DCO fault flag
   \                     ??Software_Trim_0:
   \   000014   92C38E01     BIC.W   #0x1, &0x18e
     84              }while (CSCTL7 & DCOFFG);               // Test DCO fault flag
   \   000018   92B38E01     BIT.W   #0x1, &0x18e
   \   00001C   FB23         JNE     ??Software_Trim_0
     85              // Wait FLL lock status (FLLUNLOCK) to be stable
     86              // Suggest to wait 24 cycles of divided FLL reference clock
     87              __delay_cycles((unsigned int)3000 * MCLK_FREQ_MHZ);
   \   00001E                ////////////// Start of 24000 cycles delay.
   \   00001E   0343         NOP
   \   000020   3F403E1F     MOV.W   #0x1f3e, R15
   \                     ??Software_Trim_12:
   \   000024   3F53         ADD.W   #0xffff, R15
   \   000026   FE2F         JC      ??Software_Trim_12
   \   000028                ////////////// End of delay code.
     88              while((CSCTL7 & (FLLUNLOCK0 | FLLUNLOCK1)) &&
     89                   ((CSCTL7 & DCOFFG) == 0));
   \                     ??Software_Trim_1:
   \   000028   B2B000038E01 BIT.W   #0x300, &0x18e
   \   00002E   0324         JEQ     ??Software_Trim_6
   \   000030   92B38E01     BIT.W   #0x1, &0x18e
   \   000034   F927         JEQ     ??Software_Trim_1
     90              csCtl0Read = CSCTL0;                    // Read CSCTL0
   \                     ??Software_Trim_6:
   \   000036   1E428001     MOV.W   &0x180, R14
     91              csCtl1Read = CSCTL1;                    // Read CSCTL1
   \   00003A   1F428201     MOV.W   &0x182, R15
     92              oldDcoTap = newDcoTap;                  // Record DCOTAP value of last time
   \   00003E   044C         MOV.W   R12, R4
     93              newDcoTap = csCtl0Read & 0x01ff;        // Get DCOTAP value of this time
   \   000040   0C4E         MOV.W   R14, R12
   \   000042   3CF0FF01     AND.W   #0x1ff, R12
     94              dcoFreqTrim = (csCtl1Read & 0x0070)>>4; // Get DCOFTRIM value
   \   000046   4D4F         MOV.B   R15, R13
   \   000048   5D0F         RRUM.W  #0x4, R13
   \   00004A   7DF00700     AND.B   #0x7, R13
     95              if(newDcoTap < 256){                    // DCOTAP < 256
   \   00004E   0C96         CMP.W   R6, R12
   \   000050   082C         JC      ??Software_Trim_7
     96                newDcoDelta = 256 - newDcoTap;        // Delta value between DCPTAP and 256
   \   000052   0746         MOV.W   R6, R7
   \   000054   078C         SUB.W   R12, R7
     97                if((oldDcoTap != 0xffff) &&
     98                   (oldDcoTap >= 256)){               // DCOTAP cross 256
   \   000056   3493         CMP.W   #0xffff, R4
   \   000058   0224         JEQ     ??Software_Trim_8
   \   00005A   0496         CMP.W   R6, R4
   \   00005C   072C         JC      ??Software_Trim_9
     99                  endLoop = 1;                        // Stop while loop
    100                }else{
    101                  dcoFreqTrim--;
    102                  CSCTL1 = (csCtl1Read & (~DCOFTRIM)) | (dcoFreqTrim<<4);
   \                     ??Software_Trim_8:
   \   00005E   3D53         ADD.W   #0xffff, R13
   \   000060   083C         JMP     ??Software_Trim_4
    103                }
    104              }else{                                  // DCOTAP >= 256
    105                newDcoDelta = newDcoTap - 256;        // Delta value between DCPTAP and 256
   \                     ??Software_Trim_7:
   \   000062   074C         MOV.W   R12, R7
   \   000064   375000FF     ADD.W   #0xff00, R7
    106                if(oldDcoTap < 256){                  // DCOTAP cross 256
   \   000068   0496         CMP.W   R6, R4
   \   00006A   022C         JC      ??Software_Trim_10
    107                  endLoop = 1;                        // Stop while loop
   \                     ??Software_Trim_9:
   \   00006C   5943         MOV.B   #0x1, R9
   \   00006E   083C         JMP     ??Software_Trim_5
    108                }else{
    109                  dcoFreqTrim++;
    110                  CSCTL1 = (csCtl1Read & (~DCOFTRIM)) | (dcoFreqTrim<<4);
   \                     ??Software_Trim_10:
   \   000070   1D53         ADD.W   #0x1, R13
   \                     ??Software_Trim_4:
   \   000072   5D0E         RLAM.W  #0x4, R13
   \   000074   044F         MOV.W   R15, R4
   \   000076   34F08FFF     AND.W   #0xff8f, R4
   \   00007A   04DD         BIS.W   R13, R4
   \   00007C   82448201     MOV.W   R4, &0x182
    111                }
    112              }
    113              if(newDcoDelta < bestDcoDelta){         // Record DCOTAP closest to 256
   \                     ??Software_Trim_5:
   \   000080   079A         CMP.W   R10, R7
   \   000082   032C         JC      ??Software_Trim_11
    114                csCtl0Copy = csCtl0Read;
   \   000084   0B4E         MOV.W   R14, R11
    115                csCtl1Copy = csCtl1Read;
   \   000086   084F         MOV.W   R15, R8
    116                bestDcoDelta = newDcoDelta;
   \   000088   0A47         MOV.W   R7, R10
    117              }
    118            }while(endLoop == 0);                     // Poll until endLoop == 1
   \                     ??Software_Trim_11:
   \   00008A   4993         CMP.B   #0x0, R9
   \   00008C   C127         JEQ     ??Software_Trim_2
    119            CSCTL0 = csCtl0Copy;                      // Reload locked DCOTAP
   \   00008E   824B8001     MOV.W   R11, &0x180
    120            CSCTL1 = csCtl1Copy;                      // Reload locked DCOFTRIM
   \   000092   82488201     MOV.W   R8, &0x182
    121            while(CSCTL7 & (FLLUNLOCK0 | FLLUNLOCK1));// Poll until FLL is locked
   \                     ??Software_Trim_3:
   \   000096   B2B000038E01 BIT.W   #0x300, &0x18e
   \   00009C   FC23         JNE     ??Software_Trim_3
    122          }
   \   00009E   7417         POPM.W  #0x8, R11
   \   0000A0   1001         RETA
   \   0000A2                REQUIRE _A_CSCTL0_L
   \   0000A2                REQUIRE _A_CSCTL7_L
   \   0000A2                REQUIRE _A_CSCTL1_L
    123          
    124          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Clocks
        4   -> Software_Trim
     20   Software_Trim


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     102  Init_Clocks
     162  Software_Trim
       2  _A_CSCTL0_L
       2  _A_CSCTL1_L
       2  _A_CSCTL2_L
       2  _A_CSCTL3_L
       2  _A_CSCTL4_L
       2  _A_CSCTL5_L
       2  _A_CSCTL7_L
       2  _A_PM5CTL0_L
       2  _A_SFRIFG1_L
       2  _A_WDTCTL_L

 
 264 bytes in segment CODE
  20 bytes in segment DATA16_AN
 
 264 bytes of CODE memory
   0 bytes of DATA memory (+ 20 bytes shared)

Errors: none
Warnings: none
